The sanitizer detected a memory leak vulnerability. The explanation of the vulnerability is: A program fails to free allocated memory, leading to resource exhaustion and degraded system performance over time. Here is the detail: 


Direct leak of 26720 byte(s) in 1 object(s) allocated from:
    - malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:68:3
    - ZSTD_malloc /src/c-blosc2/internal-complibs/zstd-1.4.5/common/zstd_common.c:60:12
    - ZSTD_createDDict_advanced /src/c-blosc2/internal-complibs/zstd-1.4.5/decompress/zstd_ddict.c:152:49
    - ZSTD_createDDict /src/c-blosc2/internal-complibs/zstd-1.4.5/decompress/zstd_ddict.c:173:12
    - initialize_context_decompression /src/c-blosc2/blosc/blosc2.c:1615:27
    - blosc_run_decompression_with_context /src/c-blosc2/blosc/blosc2.c:2120:11
    - blosc2_decompress /src/c-blosc2/blosc/blosc2.c:2211:12
    - LLVMFuzzerTestOneInput /src/c-blosc2/tests/fuzz/fuzz_decompress_chunk.c:34:5
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10

Indirect leak of 32 byte(s) in 1 object(s) allocated from:
    - malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:68:3
    - ZSTD_malloc /src/c-blosc2/internal-complibs/zstd-1.4.5/common/zstd_common.c:60:12
    - ZSTD_initDDict_internal /src/c-blosc2/internal-complibs/zstd-1.4.5/decompress/zstd_ddict.c:130:38
    - ZSTD_createDDict_advanced /src/c-blosc2/internal-complibs/zstd-1.4.5/decompress/zstd_ddict.c:155:39
    - ZSTD_createDDict /src/c-blosc2/internal-complibs/zstd-1.4.5/decompress/zstd_ddict.c:173:12
    - initialize_context_decompression /src/c-blosc2/blosc/blosc2.c:1615:27
    - blosc_run_decompression_with_context /src/c-blosc2/blosc/blosc2.c:2120:11
    - blosc2_decompress /src/c-blosc2/blosc/blosc2.c:2211:12
    - LLVMFuzzerTestOneInput /src/c-blosc2/tests/fuzz/fuzz_decompress_chunk.c:34:5
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10


To fix this issue, follow the advice below:

1. Ensure that every memory allocation has a corresponding deallocation.
2. Track allocated memory systematically to avoid leaks.
3. Avoid unnecessary memory allocations by reusing buffers where possible.
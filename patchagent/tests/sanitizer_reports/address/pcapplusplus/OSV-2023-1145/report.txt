=================================================================
==18==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x503000001dc9 at pc 0x5566cddfbe56 bp 0x7ffda5d22d50 sp 0x7ffda5d22d48
WRITE of size 2 at 0x503000001dc9 thread T0
SCARINESS: 33 (2-byte-write-heap-buffer-overflow)
    #0 0x5566cddfbe55 in pcpp::GREv1Layer::computeCalculateFields() /src/PcapPlusPlus/Packet++/src/GreLayer.cpp:542:32
    #1 0x5566cde36f77 in pcpp::Packet::computeCalculateFields() /src/PcapPlusPlus/Packet++/src/Packet.cpp:661:13
    #2 0x5566cdd85f21 in LLVMFuzzerTestOneInput /src/PcapPlusPlus/Tests/Fuzzers/FuzzTarget.cpp:70:17
    #3 0x5566cdc397c0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #4 0x5566cdc24a35 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #5 0x5566cdc2a4cf in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #6 0x5566cdc55772 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #7 0x7f66f6733082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #8 0x5566cdc1cc1d in _start (/out/FuzzTarget+0x1b5c1d)

DEDUP_TOKEN: pcpp::GREv1Layer::computeCalculateFields()--pcpp::Packet::computeCalculateFields()--LLVMFuzzerTestOneInput
0x503000001dc9 is located 0 bytes after 25-byte region [0x503000001db0,0x503000001dc9)
allocated by thread T0 here:
    #0 0x5566cdd82a6d in operator new[](unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:89:3
    #1 0x5566cdd9b1e0 in pcpp::PcapFileReaderDevice::getNextPacket(pcpp::RawPacket&) /src/PcapPlusPlus/Pcap++/src/PcapFileDevice.cpp:307:27
    #2 0x5566cdd96df5 in pcpp::IFileReaderDevice::getNextPackets(pcpp::PointerVector<pcpp::RawPacket>&, int) /src/PcapPlusPlus/Pcap++/src/PcapFileDevice.cpp:107:21
    #3 0x5566cdd85b02 in LLVMFuzzerTestOneInput /src/PcapPlusPlus/Tests/Fuzzers/FuzzTarget.cpp:47:14
    #4 0x5566cdc397c0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #5 0x5566cdc24a35 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #6 0x5566cdc2a4cf in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #7 0x5566cdc55772 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #8 0x7f66f6733082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: operator new[](unsigned long)--pcpp::PcapFileReaderDevice::getNextPacket(pcpp::RawPacket&)--pcpp::IFileReaderDevice::getNextPackets(pcpp::PointerVector<pcpp::RawPacket>&, int)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/PcapPlusPlus/Packet++/src/GreLayer.cpp:542:32 in pcpp::GREv1Layer::computeCalculateFields()
Shadow bytes around the buggy address:
  0x503000001b00: fa fa 00 00 00 00 fa fa 00 00 00 00 fa fa 00 00
  0x503000001b80: 00 00 fa fa 00 00 00 00 fa fa 00 00 00 02 fa fa
  0x503000001c00: 00 00 00 02 fa fa 00 00 00 02 fa fa 00 00 00 00
  0x503000001c80: fa fa 00 00 00 00 fa fa 00 00 00 02 fa fa 00 00
  0x503000001d00: 00 fa fa fa 00 00 00 fa fa fa 00 00 00 fa fa fa
=>0x503000001d80: 00 00 00 00 fa fa 00 00 00[01]fa fa 00 00 01 fa
  0x503000001e00: fa fa 00 00 04 fa fa fa fd fd fd fa fa fa fd fd
  0x503000001e80: fd fd fa fa fd fd fd fd fa fa fd fd fd fd fa fa
  0x503000001f00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x503000001f80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x503000002000: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==18==ABORTING

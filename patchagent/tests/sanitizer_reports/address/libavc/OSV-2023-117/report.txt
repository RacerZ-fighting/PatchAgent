=================================================================
==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7f8a6d5b4808 at pc 0x564deeaf8f9a bp 0x7ffe2a7d4a20 sp 0x7ffe2a7d4a18
WRITE of size 4 at 0x7f8a6d5b4808 thread T0
SCARINESS: 46 (4-byte-write-heap-buffer-overflow-far-from-bounds)
    #0 0x564deeaf8f99 in isvcd_nal_byte_swap_emulation /src/libavc/decoder/svc/isvcd_nal.c:617:25
    #1 0x564deeb04db2 in isvcd_nal_parse_non_vcl_nal /src/libavc/decoder/svc/isvcd_nal_parse.c:2362:30
    #2 0x564deeae4d97 in isvcd_seq_hdr_dec /src/libavc/decoder/svc/isvcd_api.c:4513:17
    #3 0x564deeae4d97 in isvcd_pre_parse_refine_au /src/libavc/decoder/svc/isvcd_api.c:4577:21
    #4 0x564deeae62a7 in isvcd_video_decode /src/libavc/decoder/svc/isvcd_api.c:5054:15
    #5 0x564deead50bd in Codec::decodeHeader(unsigned char const*, unsigned long) /src/libavc/fuzzer/svc_dec_fuzzer.cpp:331:15
    #6 0x564deead6082 in LLVMFuzzerTestOneInput /src/libavc/fuzzer/svc_dec_fuzzer.cpp:429:12
    #7 0x564dee9882f0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #8 0x564dee973565 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #9 0x564dee978fff in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #10 0x564dee9a42a2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #11 0x7f8a71912082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #12 0x564dee96b74d in _start (/out/svc_dec_fuzzer+0xa374d)

DEDUP_TOKEN: isvcd_nal_byte_swap_emulation--isvcd_nal_parse_non_vcl_nal--isvcd_seq_hdr_dec
0x7f8a6d5b4808 is located 8 bytes after 1048576-byte region [0x7f8a6d4b4800,0x7f8a6d5b4800)
allocated by thread T0 here:
    #0 0x564deea94b67 in posix_memalign /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:142:3
    #1 0x564deead3846 in iv_aligned_malloc(void*, int, int) /src/libavc/fuzzer/svc_dec_fuzzer.cpp:85:13
    #2 0x564deeadaef9 in isvcd_nal_parse_ctxt_create /src/libavc/decoder/svc/isvcd_api.c:1729:14
    #3 0x564deeadce78 in isvcd_allocate_static_bufs /src/libavc/decoder/svc/isvcd_api.c:2607:11
    #4 0x564deeaf5588 in isvcd_create /src/libavc/decoder/svc/isvcd_api.c:2916:11
    #5 0x564deeaf5588 in isvcd_api_function /src/libavc/decoder/svc/isvcd_api.c:7258:26
    #6 0x564deead5dcf in createCodec /src/libavc/fuzzer/svc_dec_fuzzer.cpp:153:11
    #7 0x564deead5dcf in LLVMFuzzerTestOneInput /src/libavc/fuzzer/svc_dec_fuzzer.cpp:425:12
    #8 0x564dee9882f0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #9 0x564dee973565 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #10 0x564dee978fff in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #11 0x564dee9a42a2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #12 0x7f8a71912082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: ___interceptor_posix_memalign--iv_aligned_malloc(void*, int, int)--isvcd_nal_parse_ctxt_create
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libavc/decoder/svc/isvcd_nal.c:617:25 in isvcd_nal_byte_swap_emulation
Shadow bytes around the buggy address:
  0x7f8a6d5b4580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f8a6d5b4600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f8a6d5b4680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f8a6d5b4700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f8a6d5b4780: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7f8a6d5b4800: fa[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f8a6d5b4880: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f8a6d5b4900: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f8a6d5b4980: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f8a6d5b4a00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f8a6d5b4a80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==14==ABORTING

The sanitizer detected a heap buffer overflow vulnerability. The explanation of the vulnerability is: The program tried to access a heap object outside of its allocated memory, causing potential memory corruption or crashes. Here is the detail: 

WRITE of size 8 at 0x519000004580 thread T0
    - mrb_funcall_with_block /src/mruby/src/vm.c:0:0
    - mrb_instance_new /src/mruby/src/class.c:1953:5
    - mrb_funcall_with_block /src/mruby/src/vm.c:525:13
    - mrb_make_exception /src/mruby/src/error.c:484:18
    - mrb_f_raise /src/mruby/src/kernel.c:437:11
    - mrb_vm_exec /src/mruby/src/vm.c:0:0
    - mrb_vm_run /src/mruby/src/vm.c:1070:12
    - mrb_load_exec /src/mruby/mrbgems/mruby-compiler/core/parse.y:6867:7
    - FuzzRB(unsigned char const*, unsigned long) /src/mruby/oss-fuzz/mruby_proto_fuzzer.cpp:33:6
    - TestOneProtoInput /src/mruby/oss-fuzz/mruby_proto_fuzzer.cpp:43:8
    - LLVMFuzzerTestOneInput /src/mruby/oss-fuzz/mruby_proto_fuzzer.cpp:40:1
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10

0x519000004580 is located 0 bytes after 1024-byte region [0x519000004180,0x519000004580)
allocated by thread T0 here:
    - realloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:82:3
    - mrb_realloc_simple /src/mruby/src/gc.c:226:8
    - mrb_realloc /src/mruby/src/gc.c:240:8
    - mrb_malloc /src/mruby/src/gc.c:256:10
    - mrb_calloc /src/mruby/src/gc.c:274:9
    - stack_init /src/mruby/src/vm.c:109:28
    - mrb_vm_run /src/mruby/src/vm.c:1063:5
    - mrb_init_core /src/mruby/src/init.c:50:3
    - mrb_core_init_protect /src/mruby/src/error.c:572:5
    - mrb_open_core /src/mruby/src/state.c:52:7
    - mrb_open_allocf /src/mruby/src/state.c:91:20
    - mrb_open /src/mruby/src/state.c:75:20
    - FuzzRB(unsigned char const*, unsigned long) /src/mruby/oss-fuzz/mruby_proto_fuzzer.cpp:17:19
    - TestOneProtoInput /src/mruby/oss-fuzz/mruby_proto_fuzzer.cpp:43:8
    - LLVMFuzzerTestOneInput /src/mruby/oss-fuzz/mruby_proto_fuzzer.cpp:40:1
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10


To fix this issue, follow the advice below:

1. If overflow is unavoidable, allocate a sufficiently large buffer during initialization.
2. Add explicit bounds checking before accessing arrays or buffers to prevent overflows.
3. Replace unsafe functions like memcpy, strcpy, strcat, and sprintf with safer alternatives such as strncpy, strncat, and snprintf.
4. Check for integer overflows in size calculations that could cause improper memory allocations.

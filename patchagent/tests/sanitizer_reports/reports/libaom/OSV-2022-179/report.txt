INFO:__main__:Running: docker run --privileged --shm-size=2g --platform linux/amd64 --rm -i -e HELPER=True -e ARCHITECTURE=x86_64 -v /mnt/data0/zf1025/AICC/oss-fuzz/build/out/libaom:/out -v /mnt/data0/zf1025/AICC/oss-patch-build/libaom/OSV-2022-179/poc.bin:/testcase -t gcr.io/oss-fuzz-base/base-runner reproduce av1_dec_fuzzer -runs=100.
+ FUZZER=av1_dec_fuzzer
+ shift
+ '[' '!' -v TESTCASE ']'
+ TESTCASE=/testcase
+ '[' '!' -f /testcase ']'
+ export RUN_FUZZER_MODE=interactive
+ RUN_FUZZER_MODE=interactive
+ export FUZZING_ENGINE=libfuzzer
+ FUZZING_ENGINE=libfuzzer
+ export SKIP_SEED_CORPUS=1
+ SKIP_SEED_CORPUS=1
+ run_fuzzer av1_dec_fuzzer -runs=100 /testcase
vm.mmap_rnd_bits = 28
/out/av1_dec_fuzzer -rss_limit_mb=2560 -timeout=25 -runs=100 /testcase -dict=av1_dec_fuzzer.dict < /dev/null
Dictionary: 2 entries
INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 2144760567
INFO: Loaded 1 modules   (29945 inline 8-bit counters): 29945 [0x555f5eb79ba8, 0x555f5eb810a1), 
INFO: Loaded 1 PC tables (29945 PCs): 29945 [0x555f5eb810a8,0x555f5ebf6038), 
/out/av1_dec_fuzzer: Running 1 inputs 100 time(s) each.
Running: /testcase
=================================================================
[1m[31m==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x513000000aa8 at pc 0x555f5e3b802f bp 0x7fc5a9f78860 sp 0x7fc5a9f78858
[1m[0m[1m[34mWRITE of size 4 at 0x513000000aa8 thread T5 (aom tile worker)[1m[0m
SCARINESS: 46 (4-byte-write-heap-buffer-overflow-far-from-bounds)
    #0 0x555f5e3b802e in sync_write /src/aom/av1/decoder/decodeframe.c:2567:36
    #1 0x555f5e3b802e in signal_decoding_done_for_erroneous_row /src/aom/av1/decoder/decodeframe.c:2591:3
    #2 0x555f5e3b802e in row_mt_worker_hook /src/aom/av1/decoder/decodeframe.c:3174:5
    #3 0x555f5e64728e in execute /src/aom/aom_util/aom_thread.c:163:27
    #4 0x555f5e64728e in thread_loop /src/aom/aom_util/aom_thread.c:72:7
    #5 0x555f5e338c18 in asan_thread_start(void*) /src/llvm-project/compiler-rt/lib/asan/asan_interceptors.cpp:239:28
    #6 0x7fc5b0c3e608 in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x8608) (BuildId: 5cfb896dd40f90aa8c6c8bb856004d1f5cfe293c)
    #7 0x7fc5b0b1a352 in __clone (/lib/x86_64-linux-gnu/libc.so.6+0x11f352) (BuildId: 0323ab4806bee6f846d9ad4bccfc29afdca49a58)

DEDUP_TOKEN: sync_write--signal_decoding_done_for_erroneous_row--row_mt_worker_hook
[1m[32m0x513000000aa8 is located 24 bytes before 371-byte region [0x513000000ac0,0x513000000c33)
[1m[0m[1m[35mallocated by thread T0 here:[1m[0m
    #0 0x555f5e33b0df in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:68:3
    #1 0x555f5e645d19 in aom_memalign /src/aom/aom_mem/aom_mem.c:59:22
    #2 0x555f5e645d19 in aom_malloc /src/aom/aom_mem/aom_mem.c:67:40
    #3 0x555f5e3aaa9b in dec_row_mt_alloc /src/aom/av1/decoder/decodeframe.c:2496:3
    #4 0x555f5e3aaa9b in decode_tiles_row_mt /src/aom/av1/decoder/decodeframe.c:3794:7
    #5 0x555f5e3aaa9b in av1_decode_tg_tiles_and_wrapup /src/aom/av1/decoder/decodeframe.c:5233:9
    #6 0x555f5e41bf03 in read_one_tile_group_obu /src/aom/av1/decoder/obu.c:361:3
    #7 0x555f5e41bf03 in aom_decode_frame_from_obus /src/aom/av1/decoder/obu.c:1025:33
    #8 0x555f5e3f7b98 in av1_receive_compressed_data /src/aom/av1/decoder/decoder.c:474:7
    #9 0x555f5e38c82e in frame_worker_hook /src/aom/av1/av1_dx_iface.c:412:16
    #10 0x555f5e646c7f in execute /src/aom/aom_util/aom_thread.c:163:27
    #11 0x555f5e37d3f1 in decode_one /src/aom/av1/av1_dx_iface.c:529:3
    #12 0x555f5e37d3f1 in decoder_decode /src/aom/av1/av1_dx_iface.c:716:11
    #13 0x555f5e37c184 in aom_codec_decode /src/aom/aom/src/aom_decoder.c:103:11
    #14 0x555f5e37aa70 in LLVMFuzzerTestOneInput /src/aom/examples/av1_dec_fuzzer.cc:56:9
    #15 0x555f5e22f310 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #16 0x555f5e21a585 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #17 0x555f5e22001f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #18 0x555f5e24b2c2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #19 0x7fc5b0a1f082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0323ab4806bee6f846d9ad4bccfc29afdca49a58)

DEDUP_TOKEN: __interceptor_malloc--aom_memalign--aom_malloc
Thread T5 (aom tile worker) created by T0 here:
    #0 0x555f5e320c61 in pthread_create /src/llvm-project/compiler-rt/lib/asan/asan_interceptors.cpp:250:3
    #1 0x555f5e6465e5 in reset /src/aom/aom_util/aom_thread.c:140:11
    #2 0x555f5e3b1979 in decode_mt_init /src/aom/av1/decoder/decodeframe.c:3473:31
    #3 0x555f5e3a80aa in decode_tiles_row_mt /src/aom/av1/decoder/decodeframe.c:3753:3
    #4 0x555f5e3a80aa in av1_decode_tg_tiles_and_wrapup /src/aom/av1/decoder/decodeframe.c:5233:9
    #5 0x555f5e41bf03 in read_one_tile_group_obu /src/aom/av1/decoder/obu.c:361:3
    #6 0x555f5e41bf03 in aom_decode_frame_from_obus /src/aom/av1/decoder/obu.c:1025:33
    #7 0x555f5e3f7b98 in av1_receive_compressed_data /src/aom/av1/decoder/decoder.c:474:7
    #8 0x555f5e38c82e in frame_worker_hook /src/aom/av1/av1_dx_iface.c:412:16
    #9 0x555f5e646c7f in execute /src/aom/aom_util/aom_thread.c:163:27
    #10 0x555f5e37d3f1 in decode_one /src/aom/av1/av1_dx_iface.c:529:3
    #11 0x555f5e37d3f1 in decoder_decode /src/aom/av1/av1_dx_iface.c:716:11
    #12 0x555f5e37c184 in aom_codec_decode /src/aom/aom/src/aom_decoder.c:103:11
    #13 0x555f5e37aa70 in LLVMFuzzerTestOneInput /src/aom/examples/av1_dec_fuzzer.cc:56:9
    #14 0x555f5e22f310 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #15 0x555f5e21a585 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #16 0x555f5e22001f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #17 0x555f5e24b2c2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #18 0x7fc5b0a1f082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0323ab4806bee6f846d9ad4bccfc29afdca49a58)

DEDUP_TOKEN: ___interceptor_pthread_create--reset--decode_mt_init
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/aom/av1/decoder/decodeframe.c:2567:36 in sync_write
Shadow bytes around the buggy address:
  0x513000000800: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x513000000880: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m03[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x513000000900: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x513000000980: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x513000000a00: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m03[1m[0m [1m[31mfa[1m[0m
=>0x513000000a80: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m[[1m[31mfa[1m[0m][1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x513000000b00: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x513000000b80: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x513000000c00: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m03[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x513000000c80: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x513000000d00: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           [1m[0m00[1m[0m
  Partially addressable: [1m[0m01[1m[0m [1m[0m02[1m[0m [1m[0m03[1m[0m [1m[0m04[1m[0m [1m[0m05[1m[0m [1m[0m06[1m[0m [1m[0m07[1m[0m 
  Heap left redzone:       [1m[31mfa[1m[0m
  Freed heap region:       [1m[35mfd[1m[0m
  Stack left redzone:      [1m[31mf1[1m[0m
  Stack mid redzone:       [1m[31mf2[1m[0m
  Stack right redzone:     [1m[31mf3[1m[0m
  Stack after return:      [1m[35mf5[1m[0m
  Stack use after scope:   [1m[35mf8[1m[0m
  Global redzone:          [1m[31mf9[1m[0m
  Global init order:       [1m[36mf6[1m[0m
  Poisoned by user:        [1m[34mf7[1m[0m
  Container overflow:      [1m[34mfc[1m[0m
  Array cookie:            [1m[31mac[1m[0m
  Intra object redzone:    [1m[33mbb[1m[0m
  ASan internal:           [1m[33mfe[1m[0m
  Left alloca redzone:     [1m[34mca[1m[0m
  Right alloca redzone:    [1m[34mcb[1m[0m
==14==ABORTING

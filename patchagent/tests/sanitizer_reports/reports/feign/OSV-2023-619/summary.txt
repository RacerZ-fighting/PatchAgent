The sanitizer detected a stack overflow vulnerability.The explanation of the vulnerability is: Excessive function calls lead to stack exhaustion, causing the program to crash or behave unpredictably.Here is the detail: 

- java.base/java.util.regex.Pattern$GroupTail.match (java/base/java/util/regex/Pattern$GroupTail/match:4820)
- java.base/java.util.regex.Pattern$BranchConn.match (java/base/java/util/regex/Pattern$BranchConn/match:4698)
- java.base/java.util.regex.Pattern$BmpCharProperty.match (java/base/java/util/regex/Pattern$BmpCharProperty/match:3955)
- java.base/java.util.regex.Pattern$Ques.match (java/base/java/util/regex/Pattern$Ques/match:4227)
- java.base/java.util.regex.Pattern$GroupHead.match (java/base/java/util/regex/Pattern$GroupHead/match:4789)
- java.base/java.util.regex.Pattern$Loop.match (java/base/java/util/regex/Pattern$Loop/match:4898)
- java.base/java.util.regex.Pattern$GroupTail.match (java/base/java/util/regex/Pattern$GroupTail/match:4820)
- java.base/java.util.regex.Pattern$GroupTail.match (java/base/java/util/regex/Pattern$GroupTail/match:4820)
- java.base/java.util.regex.Pattern$BranchConn.match (java/base/java/util/regex/Pattern$BranchConn/match:4698)
- java.base/java.util.regex.Pattern$BmpCharProperty.match (java/base/java/util/regex/Pattern$BmpCharProperty/match:3955)
- java.base/java.util.regex.Pattern$Branch.match (java/base/java/util/regex/Pattern$Branch/match:4734)
- java.base/java.util.regex.Pattern$GroupHead.match (java/base/java/util/regex/Pattern$GroupHead/match:4789)
- java.base/java.util.regex.Pattern$Ques.match (java/base/java/util/regex/Pattern$Ques/match:4230)
- java.base/java.util.regex.Pattern$GroupHead.match (java/base/java/util/regex/Pattern$GroupHead/match:4789)
- java.base/java.util.regex.Pattern$Loop.match (java/base/java/util/regex/Pattern$Loop/match:4898)
- java.base/java.util.regex.Pattern$GroupTail.match (java/base/java/util/regex/Pattern$GroupTail/match:4820)
- java.base/java.util.regex.Pattern$GroupTail.match (java/base/java/util/regex/Pattern$GroupTail/match:4820)
- java.base/java.util.regex.Pattern$BranchConn.match (java/base/java/util/regex/Pattern$BranchConn/match:4698)
- java.base/java.util.regex.Pattern$BmpCharProperty.match (java/base/java/util/regex/Pattern$BmpCharProperty/match:3955)
- java.base/java.util.regex.Pattern$Branch.match (java/base/java/util/regex/Pattern$Branch/match:4734)
- java.base/java.util.regex.Pattern$GroupHead.match (java/base/java/util/regex/Pattern$GroupHead/match:4789)
- java.base/java.util.regex.Pattern$Ques.match (java/base/java/util/regex/Pattern$Ques/match:4230)
- java.base/java.util.regex.Pattern$GroupHead.match (java/base/java/util/regex/Pattern$GroupHead/match:4789)
- java.base/java.util.regex.Pattern$Loop.match (java/base/java/util/regex/Pattern$Loop/match:4898)
- java.base/java.util.regex.Pattern$GroupTail.match (java/base/java/util/regex/Pattern$GroupTail/match:4820)
- java.base/java.util.regex.Pattern$GroupTail.match (java/base/java/util/regex/Pattern$GroupTail/match:4820)
- java.base/java.util.regex.Pattern$BranchConn.match (java/base/java/util/regex/Pattern$BranchConn/match:4698)
- java.base/java.util.regex.Pattern$BmpCharProperty.match (java/base/java/util/regex/Pattern$BmpCharProperty/match:3955)
- java.base/java.util.regex.Pattern$Branch.match (java/base/java/util/regex/Pattern$Branch/match:4734)
- java.base/java.util.regex.Pattern$GroupHead.match (java/base/java/util/regex/Pattern$GroupHead/match:4789)
  ... more stack frames


To fix this issue, follow the advice below:

1. Avoid deep recursion by implementing iterative solutions where possible.
2. Increase the stack size if necessary to accommodate recursion.
3. Reduce function call depth by refactoring complex recursive functions.
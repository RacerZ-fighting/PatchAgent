=================================================================
==350538==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x50200000011c at pc 0x7ffff730f6a8 bp 0x7fffffffbed0 sp 0x7fffffffb690
WRITE of size 12 at 0x50200000011c thread T0
    #0 0x7ffff730f6a7 in __asan_memcpy build-llvm/tools/clang/stage2-bins/runtimes/runtimes-bins/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:63:3
    #1 0x555555e3cf03 in Assimp::PLYImporter::LoadVertex(Assimp::PLY::Element const*, Assimp::PLY::ElementInstance const*, unsigned int) /root/code/AssetLib/Ply/PlyLoader.cpp:452:40
    #2 0x555555e47f6a in Assimp::PLY::ElementInstanceList::ParseInstanceList(Assimp::IOStreamBuffer<char>&, std::vector<char, std::allocator<char>>&, Assimp::PLY::Element const*, Assimp::PLY::ElementInstanceList*, Assimp::PLYImporter*) /root/code/AssetLib/Ply/PlyParser.cpp:575:29
    #3 0x555555e47917 in Assimp::PLY::DOM::ParseElementInstanceLists(Assimp::IOStreamBuffer<char>&, std::vector<char, std::allocator<char>>&, Assimp::PLYImporter*) /root/code/AssetLib/Ply/PlyParser.cpp:454:13
    #4 0x555555e4950f in Assimp::PLY::DOM::ParseInstance(Assimp::IOStreamBuffer<char>&, Assimp::PLY::DOM*, Assimp::PLYImporter*) /root/code/AssetLib/Ply/PlyParser.cpp:535:19
    #5 0x555555e38075 in Assimp::PLYImporter::InternReadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, aiScene*, Assimp::IOSystem*) /root/code/AssetLib/Ply/PlyLoader.cpp:178:18
    #6 0x555556a87dfb in Assimp::BaseImporter::ReadFile(Assimp::Importer*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, Assimp::IOSystem*) /root/code/Common/BaseImporter.cpp:131:9
    #7 0x5555558d467f in Assimp::Importer::ReadFile(char const*, unsigned int) /root/code/Common/Importer.cpp:709:30
    #8 0x5555558d1fc9 in Assimp::Importer::ReadFileFromMemory(void const*, unsigned long, unsigned int, char const*) /root/code/Common/Importer.cpp:507:9
    #9 0x555555861fa9 in LLVMFuzzerTestOneInput /root/fuzz/assimp_fuzzer.cc:54:34
    #10 0x555555847714 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/root/assimp_fuzzer+0x2f3714) (BuildId: fddcec92b5dd8e45c8f8e50fb1fd9818ee63a193)
    #11 0x555555830846 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/root/assimp_fuzzer+0x2dc846) (BuildId: fddcec92b5dd8e45c8f8e50fb1fd9818ee63a193)
    #12 0x5555558362fa in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/root/assimp_fuzzer+0x2e22fa) (BuildId: fddcec92b5dd8e45c8f8e50fb1fd9818ee63a193)
    #13 0x555555860ab6 in main (/root/assimp_fuzzer+0x30cab6) (BuildId: fddcec92b5dd8e45c8f8e50fb1fd9818ee63a193)
    #14 0x7ffff6f1b1c9 in __libc_start_call_main csu/../sysdeps/nptl/libc_start_call_main.h:58:16
    #15 0x7ffff6f1b28a in __libc_start_main csu/../csu/libc-start.c:360:3
    #16 0x55555582b414 in _start (/root/assimp_fuzzer+0x2d7414) (BuildId: fddcec92b5dd8e45c8f8e50fb1fd9818ee63a193)

0x50200000011c is located 0 bytes after 12-byte region [0x502000000110,0x50200000011c)
allocated by thread T0 here:
    #0 0x7ffff73117a3 in malloc build-llvm/tools/clang/stage2-bins/runtimes/runtimes-bins/compiler-rt/lib/asan/asan_malloc_linux.cpp:68:3
    #1 0x7ffff7df05db in operator new(unsigned long) /build/gcc-14-OQFzmN/gcc-14-14-20240412/build/x86_64-linux-gnu/libstdc++-v3/libsupc++/../../../../src/libstdc++-v3/libsupc++/new_op.cc:50:22
    #2 0x555555e47f6a in Assimp::PLY::ElementInstanceList::ParseInstanceList(Assimp::IOStreamBuffer<char>&, std::vector<char, std::allocator<char>>&, Assimp::PLY::Element const*, Assimp::PLY::ElementInstanceList*, Assimp::PLYImporter*) /root/code/AssetLib/Ply/PlyParser.cpp:575:29
    #3 0x555555e47917 in Assimp::PLY::DOM::ParseElementInstanceLists(Assimp::IOStreamBuffer<char>&, std::vector<char, std::allocator<char>>&, Assimp::PLYImporter*) /root/code/AssetLib/Ply/PlyParser.cpp:454:13
    #4 0x555555e4950f in Assimp::PLY::DOM::ParseInstance(Assimp::IOStreamBuffer<char>&, Assimp::PLY::DOM*, Assimp::PLYImporter*) /root/code/AssetLib/Ply/PlyParser.cpp:535:19
    #5 0x555555e38075 in Assimp::PLYImporter::InternReadFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, aiScene*, Assimp::IOSystem*) /root/code/AssetLib/Ply/PlyLoader.cpp:178:18
    #6 0x555556a87dfb in Assimp::BaseImporter::ReadFile(Assimp::Importer*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>> const&, Assimp::IOSystem*) /root/code/Common/BaseImporter.cpp:131:9
    #7 0x5555558d467f in Assimp::Importer::ReadFile(char const*, unsigned int) /root/code/Common/Importer.cpp:709:30
    #8 0x5555558d1fc9 in Assimp::Importer::ReadFileFromMemory(void const*, unsigned long, unsigned int, char const*) /root/code/Common/Importer.cpp:507:9
    #9 0x555555861fa9 in LLVMFuzzerTestOneInput /root/fuzz/assimp_fuzzer.cc:54:34
    #10 0x555555847714 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) (/root/assimp_fuzzer+0x2f3714) (BuildId: fddcec92b5dd8e45c8f8e50fb1fd9818ee63a193)
    #11 0x555555830846 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) (/root/assimp_fuzzer+0x2dc846) (BuildId: fddcec92b5dd8e45c8f8e50fb1fd9818ee63a193)
    #12 0x5555558362fa in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) (/root/assimp_fuzzer+0x2e22fa) (BuildId: fddcec92b5dd8e45c8f8e50fb1fd9818ee63a193)
    #13 0x555555860ab6 in main (/root/assimp_fuzzer+0x30cab6) (BuildId: fddcec92b5dd8e45c8f8e50fb1fd9818ee63a193)
    #14 0x7ffff6f1b1c9 in __libc_start_call_main csu/../sysdeps/nptl/libc_start_call_main.h:58:16
    #15 0x7ffff6f1b28a in __libc_start_main csu/../csu/libc-start.c:360:3
    #16 0x55555582b414 in _start (/root/assimp_fuzzer+0x2d7414) (BuildId: fddcec92b5dd8e45c8f8e50fb1fd9818ee63a193)

SUMMARY: AddressSanitizer: heap-buffer-overflow /root/code/AssetLib/Ply/PlyLoader.cpp:452:40 in Assimp::PLYImporter::LoadVertex(Assimp::PLY::Element const*, Assimp::PLY::ElementInstance const*, unsigned int)
Shadow bytes around the buggy address:
  0x501ffffffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x501fffffff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x501fffffff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x502000000000: fa fa 00 00 fa fa 00 00 fa fa 00 fa fa fa 00 fa
  0x502000000080: fa fa fd fa fa fa fd fd fa fa 00 00 fa fa fd fa
=>0x502000000100: fa fa 00[04]fa fa 00 00 fa fa fd fa fa fa 00 fa
  0x502000000180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000000200: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000000280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000000300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000000380: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==350538==ABORTING

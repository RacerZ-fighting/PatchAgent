The sanitizer detected a heap double free vulnerability. The explanation of the vulnerability is: A heap-allocated memory block is freed twice, potentially causing memory corruption or security vulnerabilities. Here is the detail: 

[1m[0mSCARINESS: 42 (double-free)
    - free /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:52:3
    - sc_pkcs15_free_object_content /src/opensc/src/libopensc/pkcs15.c:2731:4
    - sc_pkcs15_free_object /src/opensc/src/libopensc/pkcs15.c:1996:2
    - LLVMFuzzerTestOneInput /src/opensc/src/tests/fuzzing/fuzz_pkcs15_decode.c:93:3
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10

[1m[32m0x506000000080 is located 0 bytes inside of 49-byte region [0x506000000080,0x5060000000b1)
[1m[0m[1m[35mfreed by thread T0 here:[1m[0m
    - free /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:52:3
    - sc_pkcs15_decode_pukdf_entry /src/opensc/src/libopensc/pkcs15-pubkey.c:355:4
    - LLVMFuzzerTestOneInput /src/opensc/src/tests/fuzzing/fuzz_pkcs15_decode.c:88:24
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10

[1m[35mpreviously allocated by thread T0 here:[1m[0m
    - malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:68:3
    - asn1_decode_entry /src/opensc/src/libopensc/asn1.c:1579:13
    - asn1_decode /src/opensc/src/libopensc/asn1.c:1783:7
    - asn1_decode /src/opensc/src/libopensc/asn1.c:1753:8
    - asn1_decode_entry /src/opensc/src/libopensc/asn1.c:1507:8
    - asn1_decode /src/opensc/src/libopensc/asn1.c:1783:7
    - asn1_decode_entry /src/opensc/src/libopensc/asn1.c:1507:8
    - asn1_decode /src/opensc/src/libopensc/asn1.c:1783:7
    - asn1_decode_p15_object /src/opensc/src/libopensc/asn1.c:1428:6
    - asn1_decode_entry /src/opensc/src/libopensc/asn1.c:1655:8
    - asn1_decode /src/opensc/src/libopensc/asn1.c:1783:7
    - asn1_decode /src/opensc/src/libopensc/asn1.c:1753:8
    - sc_asn1_decode /src/opensc/src/libopensc/asn1.c:1805:9
    - sc_pkcs15_decode_pukdf_entry /src/opensc/src/libopensc/pkcs15-pubkey.c:290:6
    - LLVMFuzzerTestOneInput /src/opensc/src/tests/fuzzing/fuzz_pkcs15_decode.c:88:24
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10


To fix this issue, follow the advice below:

1. Set pointers to NULL immediately after freeing them to prevent accidental reuse.
2. Ensure that each allocated memory block is freed only once.
3. Track memory allocations and deallocations systematically to prevent use-after-free conditions.
4. Consider swap the order of freeing memory and accessing it.
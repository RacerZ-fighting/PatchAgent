The sanitizer detected a heap buffer overflow vulnerability.The explanation of the vulnerability is: The program tried to access a heap object outside of its allocated memory, causing potential memory corruption or crashes..Here is the detail: 

[1m[0m[1m[34mREAD of size 1 at 0x5070000000d7 thread T0[1m[0m
    - LibRaw_buffer_datastream::scanf_one(char const*, void*) /src/libraw/src/libraw_datastream.cpp:467:11
    - LibRaw::parse_mos(long long) /src/libraw/src/metadata/mediumformat.cpp:456:7
    - LibRaw::parse_tiff_ifd(int) /src/libraw/src/metadata/tiff.cpp:771:7
    - LibRaw::parse_tiff(int) /src/libraw/src/metadata/tiff.cpp:1546:9
    - LibRaw::identify() /src/libraw/src/metadata/identify.cpp:510:14
    - LibRaw::open_datastream(LibRaw_abstract_datastream*) /src/libraw/src/utils/open.cpp:480:4
    - LibRaw::open_buffer(void const*, unsigned long) /src/libraw/src/utils/open.cpp:240:13
    - LLVMFuzzerTestOneInput /src/libraw_fuzzer.cc:62:24
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10

[1m[32m0x5070000000d7 is located 0 bytes after 71-byte region [0x507000000090,0x5070000000d7)
[1m[0m[1m[35mallocated by thread T0 here:[1m[0m
    - operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:86:3
    - __libcpp_operator_new<unsigned long> /usr/local/include/c++/v1/new:271:10
    - __libcpp_allocate /usr/local/include/c++/v1/new:295:10
    - allocate /usr/local/include/c++/v1/__memory/allocator.h:125:32
    - __allocate_at_least<std::__1::allocator<char> > /usr/local/include/c++/v1/__memory/allocate_at_least.h:55:19
    - __vallocate /usr/local/include/c++/v1/vector:741:25
    - std::__1::vector<char, std::__1::allocator<char>>::vector(unsigned long) /usr/local/include/c++/v1/vector:1121:5
    - ConsumeBytes<char> /usr/local/lib/clang/18/include/fuzzer/FuzzedDataProvider.h:361:18
    - ConsumeBytes<char> /usr/local/lib/clang/18/include/fuzzer/FuzzedDataProvider.h:110:10
    - ConsumeRemainingBytes<char> /usr/local/lib/clang/18/include/fuzzer/FuzzedDataProvider.h:129:10
    - LLVMFuzzerTestOneInput /src/libraw_fuzzer.cc:61:35
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10


To fix this issue, follow the advice below:

1. If overflow is unavoidable, allocate a sufficiently large buffer during initialization.
2. Add explicit bounds checking before accessing arrays or buffers to prevent overflows.
3. Replace unsafe functions like memcpy, strcpy, strcat, and sprintf with safer alternatives such as strncpy, strncat, and snprintf.
4. Check for integer overflows in size calculations that could cause improper memory allocations.

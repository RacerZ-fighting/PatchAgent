The sanitizer detected a heap use after free vulnerability.The explanation of the vulnerability is: Memory is accessed after it has been freed, leading to undefined behavior and security risks..Here is the detail: 

[1m[0m[1m[34mREAD of size 8 at 0x52b000000660 thread T3 (ZMQbg/IO/0)[1m[0m
    - zmq::stream_engine_base_t::out_event() /src/libzmq/src/stream_engine_base.cpp:360:13
    - zmq::epoll_t::loop() /src/libzmq/src/epoll.cpp:202:29
    - thread_routine(void*) /src/libzmq/src/thread.cpp:250:5
    - asan_thread_start(void*) /src/llvm-project/compiler-rt/lib/asan/asan_interceptors.cpp:239:28

[1m[32m0x52b000000660 is located 1120 bytes inside of 25384-byte region [0x52b000000200,0x52b000006528)
[1m[0m[1m[35mfreed by thread T3 (ZMQbg/IO/0) here:[1m[0m
    - operator delete(void*) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:143:3
    - zmq::stream_engine_base_t::error(zmq::i_engine::error_reason_t) /src/libzmq/src/stream_engine_base.cpp:715:5
    - zmq::ws_engine_t::close_connection_after_close(zmq::msg_t*) /src/libzmq/src/ws_engine.cpp:975:5
    - zmq::stream_engine_base_t::out_event() /src/libzmq/src/stream_engine_base.cpp:347:17
    - zmq::epoll_t::loop() /src/libzmq/src/epoll.cpp:202:29
    - thread_routine(void*) /src/libzmq/src/thread.cpp:250:5
    - asan_thread_start(void*) /src/llvm-project/compiler-rt/lib/asan/asan_interceptors.cpp:239:28

[1m[35mpreviously allocated by thread T3 (ZMQbg/IO/0) here:[1m[0m
    - operator new(unsigned long, std::nothrow_t const&) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:92:3
    - zmq::ws_connecter_t::create_engine(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) /src/libzmq/src/ws_connecter.cpp:294:18
    - zmq::ws_connecter_t::out_event() /src/libzmq/src/ws_connecter.cpp:130:9
    - zmq::epoll_t::loop() /src/libzmq/src/epoll.cpp:202:29
    - thread_routine(void*) /src/libzmq/src/thread.cpp:250:5
    - asan_thread_start(void*) /src/llvm-project/compiler-rt/lib/asan/asan_interceptors.cpp:239:28

Thread T3 (ZMQbg/IO/0) created by T0 here:
    - pthread_create /src/llvm-project/compiler-rt/lib/asan/asan_interceptors.cpp:250:3
    - zmq::thread_t::start(void (*)(void*), void*, char const*) /src/libzmq/src/thread.cpp:261:14
    - zmq::thread_ctx_t::start_thread(zmq::thread_t&, void (*)(void*), void*, char const*) const /src/libzmq/src/ctx.cpp:561:13
    - zmq::io_thread_t::start() /src/libzmq/src/io_thread.cpp:63:14
    - zmq::ctx_t::start() /src/libzmq/src/ctx.cpp:456:20
    - zmq::ctx_t::create_socket(int) /src/libzmq/src/ctx.cpp:490:14
    - test_context_socket(int) /src/libzmq/tests/testutil_unity.cpp:229:26
    - LLVMFuzzerTestOneInput /src/libzmq/tests/test_connect_ws_fuzzer.cpp:46:20
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10


To fix this issue, follow the advice below:

1. Set pointers to NULL immediately after freeing them to prevent accidental reuse.
2. Ensure that each allocated memory block is freed only once.
3. Track memory allocations and deallocations systematically to prevent use-after-free conditions.
4. Consider swap the order of freeing memory and accessing it.
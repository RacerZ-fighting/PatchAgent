The sanitizer detected a heap buffer overflow vulnerability. The explanation of the vulnerability is: The program tried to access a heap object outside of its allocated memory, causing potential memory corruption or crashes. Here is the detail: 

[1m[0m[1m[34mREAD of size 8 at 0x524000007f40 thread T33[1m[0m
    - ih264d_fill_bs1_16x16mb_pslice /src/libavc/decoder/ih264d_compute_bs.c:222:24
    - ih264d_compute_bs_non_mbaff_thread /src/libavc/decoder/ih264d_thread_compute_bs.c:267:9
    - ih264d_recon_deblk_slice /src/libavc/decoder/ih264d_thread_compute_bs.c:650:13
    - ih264d_recon_deblk_thread /src/libavc/decoder/ih264d_thread_compute_bs.c:702:9
    - asan_thread_start(void*) /src/llvm-project/compiler-rt/lib/asan/asan_interceptors.cpp:239:28

Address 0x524000007f40 is a wild pointer inside of access range of size 0x000000000008.

To fix this issue, follow the advice below:

1. If overflow is unavoidable, allocate a sufficiently large buffer during initialization.
2. Add explicit bounds checking before accessing arrays or buffers to prevent overflows.
3. Replace unsafe functions like memcpy, strcpy, strcat, and sprintf with safer alternatives such as strncpy, strncat, and snprintf.
4. Check for integer overflows in size calculations that could cause improper memory allocations.

The sanitizer detected a heap buffer overflow vulnerability.The explanation of the vulnerability is: The program tried to access a heap object outside of its allocated memory, causing potential memory corruption or crashes..Here is the detail: 

[1m[0m[1m[34mREAD of size 1 at 0x50b0000000b0 thread T0[1m[0m
    - operator unsigned int /src/harfbuzz/src/hb-algs.hh:141:46
    - operator unsigned int /src/harfbuzz/src/hb-open-type.hh:68:109
    - get_population /src/harfbuzz/src/OT/Layout/Common/RangeRecord.hh:56:9
    - get_population /src/harfbuzz/src/OT/Layout/Common/CoverageFormat2.hh:72:16
    - OT::Layout::Common::Coverage::get_population() const /src/harfbuzz/src/OT/Layout/Common/Coverage.hh:103:30
    - OT::Layout::GPOS_impl::SinglePosFormat1::sanitize(hb_sanitize_context_t*) const /src/harfbuzz/src/OT/Layout/GPOS/SinglePosFormat1.hh:29:5
    - _dispatch<OT::Layout::GPOS_impl::PosLookupSubTable, unsigned int> /src/harfbuzz/src/hb-sanitize.hh:151:56
    - dispatch<OT::Layout::GPOS_impl::PosLookupSubTable, unsigned int> /src/harfbuzz/src/hb-sanitize.hh:155:39
    - sanitize<unsigned int> /src/harfbuzz/src/hb-open-type.hh:428:5
    - _dispatch<OT::OffsetTo<OT::Layout::GPOS_impl::PosLookupSubTable, OT::IntType<unsigned short, 2U>, true>, const OT::Lookup *, unsigned int> /src/harfbuzz/src/hb-sanitize.hh:148:56
    - dispatch<OT::OffsetTo<OT::Layout::GPOS_impl::PosLookupSubTable, OT::IntType<unsigned short, 2U>, true>, const OT::Lookup *, unsigned int> /src/harfbuzz/src/hb-sanitize.hh:155:39
    - bool OT::ArrayOf<OT::OffsetTo<OT::Layout::GPOS_impl::PosLookupSubTable, OT::IntType<unsigned short, 2u>, true>, OT::IntType<unsigned short, 2u>>::sanitize<OT::Lookup const*, unsigned int>(hb_sanitize_context_t*, OT::Lookup const*&&, unsigned int&&) const /src/harfbuzz/src/hb-open-type.hh:731:11
    - bool OT::Lookup::sanitize<OT::Layout::GPOS_impl::PosLookupSubTable>(hb_sanitize_context_t*) const /src/harfbuzz/src/hb-ot-layout-common.hh:1374:9
    - sanitize /src/harfbuzz/src/OT/Layout/GPOS/PosLookup.hh:72:20
    - _dispatch<OT::Layout::GPOS_impl::PosLookup> /src/harfbuzz/src/hb-sanitize.hh:148:56
    - dispatch<OT::Layout::GPOS_impl::PosLookup> /src/harfbuzz/src/hb-sanitize.hh:155:39
    - sanitize<> /src/harfbuzz/src/hb-open-type.hh:428:5
    - _dispatch<OT::OffsetTo<OT::Layout::GPOS_impl::PosLookup, OT::IntType<unsigned short, 2U>, true>, const OT::List16OfOffsetTo<OT::Layout::GPOS_impl::PosLookup, OT::IntType<unsigned short, 2U> > *> /src/harfbuzz/src/hb-sanitize.hh:148:56
    - dispatch<OT::OffsetTo<OT::Layout::GPOS_impl::PosLookup, OT::IntType<unsigned short, 2U>, true>, const OT::List16OfOffsetTo<OT::Layout::GPOS_impl::PosLookup, OT::IntType<unsigned short, 2U> > *> /src/harfbuzz/src/hb-sanitize.hh:155:39
    - bool OT::ArrayOf<OT::OffsetTo<OT::Layout::GPOS_impl::PosLookup, OT::IntType<unsigned short, 2u>, true>, OT::IntType<unsigned short, 2u>>::sanitize<OT::List16OfOffsetTo<OT::Layout::GPOS_impl::PosLookup, OT::IntType<unsigned short, 2u>> const*>(hb_sanitize_context_t*, OT::List16OfOffsetTo<OT::Layout::GPOS_impl::PosLookup, OT::IntType<unsigned short, 2u>> const*&&) const /src/harfbuzz/src/hb-open-type.hh:731:11
    - sanitize<> /src/harfbuzz/src/hb-open-type.hh:792:5
    - _dispatch<OT::List16OfOffsetTo<OT::Layout::GPOS_impl::PosLookup, OT::IntType<unsigned short, 2U> > > /src/harfbuzz/src/hb-sanitize.hh:148:56
    - dispatch<OT::List16OfOffsetTo<OT::Layout::GPOS_impl::PosLookup, OT::IntType<unsigned short, 2U> > > /src/harfbuzz/src/hb-sanitize.hh:155:39
    - sanitize<> /src/harfbuzz/src/hb-open-type.hh:428:5
    - bool OT::GSUBGPOSVersion1_2<OT::Layout::SmallTypes>::sanitize<OT::Layout::GPOS_impl::PosLookup>(hb_sanitize_context_t*) const /src/harfbuzz/src/hb-ot-layout-gsubgpos.hh:4156:9
    - sanitize<OT::Layout::GPOS_impl::PosLookup> /src/harfbuzz/src/hb-ot-layout-gsubgpos.hh:4246:13
    - sanitize /src/harfbuzz/src/OT/Layout/GPOS/GPOS.hh:49:5
    - hb_blob_t* hb_sanitize_context_t::sanitize_blob<OT::Layout::GPOS>(hb_blob_t*) /src/harfbuzz/src/hb-sanitize.hh:359:15
    - reference_table<OT::Layout::GPOS> /src/harfbuzz/src/hb-sanitize.hh:411:12
    - hb_blob_ptr_t<OT::Layout::GPOS> hb_subset_plan_t::source_table<OT::Layout::GPOS>() /src/harfbuzz/src/hb-subset-plan.hh:223:68
    - _closure_glyphs_lookups_features<OT::Layout::GPOS> /src/harfbuzz/src/hb-subset-plan.cc:286:34
    - _populate_gids_to_retain(hb_subset_plan_t*, hb_set_t*) /src/harfbuzz/src/hb-subset-plan.cc:649:5
    - hb_subset_plan_t::hb_subset_plan_t(hb_face_t*, hb_subset_input_t const*) /src/harfbuzz/src/hb-subset-plan.cc:886:3
    - hb_object_create<hb_subset_plan_t, hb_face_t *, const hb_subset_input_t *> /src/harfbuzz/src/hb-object.hh:245:13
    - hb_subset_plan_create_or_fail /src/harfbuzz/src/hb-subset-plan.cc:952:7
    - hb_subset_or_fail /src/harfbuzz/src/hb-subset.cc:533:28
    - trySubset(hb_face_t*, unsigned int const*, int, unsigned int) /src/harfbuzz/test/fuzzing/hb-subset-fuzzer.cc:26:23
    - LLVMFuzzerTestOneInput /src/harfbuzz/test/fuzzing/hb-subset-fuzzer.cc:66:3
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10

[1m[32m0x50b0000000b0 is located 2 bytes after 110-byte region [0x50b000000040,0x50b0000000ae)
[1m[0m[1m[35mallocated by thread T0 here:[1m[0m
    - malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:68:3
    - try_make_writable /src/harfbuzz/src/hb-blob.cc:492:23
    - hb_blob_get_data_writable /src/harfbuzz/src/hb-blob.cc:403:13
    - hb_blob_t* hb_sanitize_context_t::sanitize_blob<OT::Layout::GPOS>(hb_blob_t*) /src/harfbuzz/src/hb-sanitize.hh:378:10
    - reference_table<OT::Layout::GPOS> /src/harfbuzz/src/hb-sanitize.hh:411:12
    - hb_blob_ptr_t<OT::Layout::GPOS> hb_subset_plan_t::source_table<OT::Layout::GPOS>() /src/harfbuzz/src/hb-subset-plan.hh:223:68
    - _closure_glyphs_lookups_features<OT::Layout::GPOS> /src/harfbuzz/src/hb-subset-plan.cc:286:34
    - _populate_gids_to_retain(hb_subset_plan_t*, hb_set_t*) /src/harfbuzz/src/hb-subset-plan.cc:649:5
    - hb_subset_plan_t::hb_subset_plan_t(hb_face_t*, hb_subset_input_t const*) /src/harfbuzz/src/hb-subset-plan.cc:886:3
    - hb_object_create<hb_subset_plan_t, hb_face_t *, const hb_subset_input_t *> /src/harfbuzz/src/hb-object.hh:245:13
    - hb_subset_plan_create_or_fail /src/harfbuzz/src/hb-subset-plan.cc:952:7
    - hb_subset_or_fail /src/harfbuzz/src/hb-subset.cc:533:28
    - trySubset(hb_face_t*, unsigned int const*, int, unsigned int) /src/harfbuzz/test/fuzzing/hb-subset-fuzzer.cc:26:23
    - LLVMFuzzerTestOneInput /src/harfbuzz/test/fuzzing/hb-subset-fuzzer.cc:66:3
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10


To fix this issue, follow the advice below:

1. If overflow is unavoidable, allocate a sufficiently large buffer during initialization.
2. Add explicit bounds checking before accessing arrays or buffers to prevent overflows.
3. Replace unsafe functions like memcpy, strcpy, strcat, and sprintf with safer alternatives such as strncpy, strncat, and snprintf.
4. Check for integer overflows in size calculations that could cause improper memory allocations.

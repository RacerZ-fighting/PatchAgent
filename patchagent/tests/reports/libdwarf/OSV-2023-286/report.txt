INFO:__main__:Running: docker run --privileged --shm-size=2g --platform linux/amd64 --rm -i -e HELPER=True -e ARCHITECTURE=x86_64 -v /mnt/data0/zf1025/AICC/oss-fuzz/build/out/libdwarf:/out -v /mnt/data0/zf1025/AICC/oss-patch-build/libdwarf/OSV-2023-286/poc.bin:/testcase -t gcr.io/oss-fuzz-base/base-runner reproduce fuzz_die_cu_print -runs=100.
+ FUZZER=fuzz_die_cu_print
+ shift
+ '[' '!' -v TESTCASE ']'
+ TESTCASE=/testcase
+ '[' '!' -f /testcase ']'
+ export RUN_FUZZER_MODE=interactive
+ RUN_FUZZER_MODE=interactive
+ export FUZZING_ENGINE=libfuzzer
+ FUZZING_ENGINE=libfuzzer
+ export SKIP_SEED_CORPUS=1
+ SKIP_SEED_CORPUS=1
+ run_fuzzer fuzz_die_cu_print -runs=100 /testcase
vm.mmap_rnd_bits = 28
/out/fuzz_die_cu_print -rss_limit_mb=2560 -timeout=25 -runs=100 /testcase < /dev/null
INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 3904385675
INFO: Loaded 1 modules   (11293 inline 8-bit counters): 11293 [0x5627fab024c0, 0x5627fab050dd), 
INFO: Loaded 1 PC tables (11293 PCs): 11293 [0x5627fab050e0,0x5627fab312b0), 
/out/fuzz_die_cu_print: Running 1 inputs 100 time(s) each.
Running: /testcase
=================================================================
[1m[31m==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x50400000010c at pc 0x5627fa957fe2 bp 0x7fff59b7e640 sp 0x7fff59b7de00
[1m[0m[1m[34mREAD of size 4 at 0x50400000010c thread T0[1m[0m
SCARINESS: 17 (4-byte-read-heap-buffer-overflow)
    #0 0x5627fa957fe1 in __asan_memcpy /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:63:3
    #1 0x5627faa10eee in _dwarf_memcpy_noswap_bytes /src/libdwarf/src/lib/libdwarf/dwarf_memcpy_swap.c:49:5
    #2 0x5627fa9b8977 in _dwarf_extract_string_offset_via_str_offsets /src/libdwarf/src/lib/libdwarf/dwarf_form.c:1801:5
    #3 0x5627fa9b9541 in dwarf_formstring /src/libdwarf/src/lib/libdwarf/dwarf_form.c:2009:15
    #4 0x5627fa99d67f in find_cu_die_base_fields /src/libdwarf/src/lib/libdwarf/dwarf_die_deliv.c:1280:25
    #5 0x5627fa99d67f in finish_cu_context_via_cudie_inner /src/libdwarf/src/lib/libdwarf/dwarf_die_deliv.c:576:19
    #6 0x5627fa99d67f in finish_up_cu_context_from_cudie /src/libdwarf/src/lib/libdwarf/dwarf_die_deliv.c:1416:15
    #7 0x5627fa99d67f in _dwarf_create_a_new_cu_context_record_on_list /src/libdwarf/src/lib/libdwarf/dwarf_die_deliv.c:1555:11
    #8 0x5627fa99b908 in _dwarf_next_cu_header_internal /src/libdwarf/src/lib/libdwarf/dwarf_die_deliv.c:1791:15
    #9 0x5627fa99b190 in dwarf_next_cu_header_d /src/libdwarf/src/lib/libdwarf/dwarf_die_deliv.c:957:11
    #10 0x5627fa99784f in LLVMFuzzerTestOneInput /src/libdwarf/fuzz/fuzz_die_cu_print.c:77:13
    #11 0x5627fa84e320 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #12 0x5627fa839595 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #13 0x5627fa83f02f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #14 0x5627fa86a2d2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #15 0x7f09276ec082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0323ab4806bee6f846d9ad4bccfc29afdca49a58)
    #16 0x5627fa83177d in _start (/out/fuzz_die_cu_print+0xa177d)

DEDUP_TOKEN: __asan_memcpy--_dwarf_memcpy_noswap_bytes--_dwarf_extract_string_offset_via_str_offsets
[1m[32m0x50400000010c is located 4 bytes before 36-byte region [0x504000000110,0x504000000134)
[1m[0m[1m[35mallocated by thread T0 here:[1m[0m
    #0 0x5627fa95a0ef in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:68:3
    #1 0x5627faa4a75d in elf_load_nolibelf_section /src/libdwarf/src/lib/libdwarf/dwarf_elfread.c:230:26
    #2 0x5627fa9ded11 in _dwarf_load_section /src/libdwarf/src/lib/libdwarf/dwarf_init_finish.c:1999:11
    #3 0x5627fa9b844b in _dwarf_extract_string_offset_via_str_offsets /src/libdwarf/src/lib/libdwarf/dwarf_form.c:1676:11
    #4 0x5627fa9b9541 in dwarf_formstring /src/libdwarf/src/lib/libdwarf/dwarf_form.c:2009:15
    #5 0x5627fa99d67f in find_cu_die_base_fields /src/libdwarf/src/lib/libdwarf/dwarf_die_deliv.c:1280:25
    #6 0x5627fa99d67f in finish_cu_context_via_cudie_inner /src/libdwarf/src/lib/libdwarf/dwarf_die_deliv.c:576:19
    #7 0x5627fa99d67f in finish_up_cu_context_from_cudie /src/libdwarf/src/lib/libdwarf/dwarf_die_deliv.c:1416:15
    #8 0x5627fa99d67f in _dwarf_create_a_new_cu_context_record_on_list /src/libdwarf/src/lib/libdwarf/dwarf_die_deliv.c:1555:11
    #9 0x5627fa99b908 in _dwarf_next_cu_header_internal /src/libdwarf/src/lib/libdwarf/dwarf_die_deliv.c:1791:15
    #10 0x5627fa99b190 in dwarf_next_cu_header_d /src/libdwarf/src/lib/libdwarf/dwarf_die_deliv.c:957:11
    #11 0x5627fa99784f in LLVMFuzzerTestOneInput /src/libdwarf/fuzz/fuzz_die_cu_print.c:77:13
    #12 0x5627fa84e320 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #13 0x5627fa839595 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #14 0x5627fa83f02f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #15 0x5627fa86a2d2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #16 0x7f09276ec082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0323ab4806bee6f846d9ad4bccfc29afdca49a58)

DEDUP_TOKEN: __interceptor_malloc--elf_load_nolibelf_section--_dwarf_load_section
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libdwarf/src/lib/libdwarf/dwarf_memcpy_swap.c:49:5 in _dwarf_memcpy_noswap_bytes
Shadow bytes around the buggy address:
  0x503ffffffe80: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x503fffffff00: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x503fffffff80: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x504000000000: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x504000000080: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m
=>0x504000000100: [1m[31mfa[1m[0m[[1m[31mfa[1m[0m][1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m04[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x504000000180: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x504000000200: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x504000000280: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x504000000300: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x504000000380: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           [1m[0m00[1m[0m
  Partially addressable: [1m[0m01[1m[0m [1m[0m02[1m[0m [1m[0m03[1m[0m [1m[0m04[1m[0m [1m[0m05[1m[0m [1m[0m06[1m[0m [1m[0m07[1m[0m 
  Heap left redzone:       [1m[31mfa[1m[0m
  Freed heap region:       [1m[35mfd[1m[0m
  Stack left redzone:      [1m[31mf1[1m[0m
  Stack mid redzone:       [1m[31mf2[1m[0m
  Stack right redzone:     [1m[31mf3[1m[0m
  Stack after return:      [1m[35mf5[1m[0m
  Stack use after scope:   [1m[35mf8[1m[0m
  Global redzone:          [1m[31mf9[1m[0m
  Global init order:       [1m[36mf6[1m[0m
  Poisoned by user:        [1m[34mf7[1m[0m
  Container overflow:      [1m[34mfc[1m[0m
  Array cookie:            [1m[31mac[1m[0m
  Intra object redzone:    [1m[33mbb[1m[0m
  ASan internal:           [1m[33mfe[1m[0m
  Left alloca redzone:     [1m[34mca[1m[0m
  Right alloca redzone:    [1m[34mcb[1m[0m
==14==ABORTING

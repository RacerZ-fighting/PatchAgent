INFO:__main__:Running: docker run --privileged --shm-size=2g --platform linux/amd64 --rm -i -e HELPER=True -e ARCHITECTURE=x86_64 -v /mnt/data0/zf1025/AICC/oss-fuzz/build/out/pistache:/out -v /mnt/data0/zf1025/AICC/oss-patch-build/pistache/OSV-2024-322/poc.bin:/testcase -t gcr.io/oss-fuzz-base/base-runner reproduce fuzz_parsers -runs=100.
+ FUZZER=fuzz_parsers
+ shift
+ '[' '!' -v TESTCASE ']'
+ TESTCASE=/testcase
+ '[' '!' -f /testcase ']'
+ export RUN_FUZZER_MODE=interactive
+ RUN_FUZZER_MODE=interactive
+ export FUZZING_ENGINE=libfuzzer
+ FUZZING_ENGINE=libfuzzer
+ export SKIP_SEED_CORPUS=1
+ SKIP_SEED_CORPUS=1
+ run_fuzzer fuzz_parsers -runs=100 /testcase
vm.mmap_rnd_bits = 28
/out/fuzz_parsers -rss_limit_mb=2560 -timeout=25 -runs=100 /testcase < /dev/null
INFO: Running with entropic power schedule (0xFF, 100).
INFO: Seed: 1670235405
INFO: Loaded 1 modules   (20783 inline 8-bit counters): 20783 [0x55def6288090, 0x55def628d1bf), 
INFO: Loaded 1 PC tables (20783 PCs): 20783 [0x55def628d1c0,0x55def62de4b0), 
/out/fuzz_parsers: Running 1 inputs 100 time(s) each.
Running: /testcase
=================================================================
[1m[31m==14==ERROR: AddressSanitizer: container-overflow on address 0x5060000001c2 at pc 0x55def5f893c9 bp 0x7ffde8099eb0 sp 0x7ffde8099670
[1m[0m[1m[34mREAD of size 3 at 0x5060000001c2 thread T0[1m[0m
SCARINESS: 15 (3-byte-read-container-overflow)
    #0 0x55def5f893c8 in StrtolFixAndCheck(void*, char const*, char**, char*, int) /src/llvm-project/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:3566:3
    #1 0x55def5f7502e in StrtolImpl<long (*)(const char *, char **, int)> /src/llvm-project/compiler-rt/lib/asan/asan_interceptors.cpp:618:3
    #2 0x55def5f7502e in strtol /src/llvm-project/compiler-rt/lib/asan/asan_interceptors.cpp:630:1
    #3 0x55def5fed2f5 in Pistache::Http::Private::BodyStep::Chunk::parse(Pistache::StreamCursor&) /src/pistache/src/common/http.cc:460:35
    #4 0x55def5fecada in Pistache::Http::Private::BodyStep::parseTransferEncoding(Pistache::StreamCursor&, std::__1::shared_ptr<Pistache::Http::Header::TransferEncoding> const&) /src/pistache/src/common/http.cc:507:44
    #5 0x55def5febb41 in Pistache::Http::Private::BodyStep::apply(Pistache::StreamCursor&) /src/pistache/src/common/http.cc:397:24
    #6 0x55def5fedaed in Pistache::Http::Private::ParserBase::parse() /src/pistache/src/common/http.cc:545:36
    #7 0x55def5fcff4d in operator() /src/pistache/build/../tests/fuzzers/fuzz_parser.cpp:82:48
    #8 0x55def5fcff4d in ignoreExceptions<(lambda at ../tests/fuzzers/fuzz_parser.cpp:82:26)> /src/pistache/build/../tests/fuzzers/fuzz_parser.cpp:17:9
    #9 0x55def5fcff4d in fuzz_request_parser(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) /src/pistache/build/../tests/fuzzers/fuzz_parser.cpp:82:9
    #10 0x55def5fd3290 in LLVMFuzzerTestOneInput /src/pistache/build/../tests/fuzzers/fuzz_parser.cpp:153:9
    #11 0x55def5e808d0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #12 0x55def5e6bb45 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #13 0x55def5e715df in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #14 0x55def5e9c882 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #15 0x7fa718e50082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0323ab4806bee6f846d9ad4bccfc29afdca49a58)
    #16 0x55def5e63d2d in _start (/out/fuzz_parsers+0xe2d2d)

DEDUP_TOKEN: StrtolFixAndCheck(void*, char const*, char**, char*, int)--StrtolImpl<long (*)(const char *, char **, int)>--__interceptor_strtol
[1m[32m0x5060000001c2 is located 34 bytes inside of 64-byte region [0x5060000001a0,0x5060000001e0)
[1m[0m[1m[35mallocated by thread T0 here:[1m[0m
    #0 0x55def5fc9a6d in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:86:3
    #1 0x55def600faf2 in __libcpp_operator_new<unsigned long> /usr/local/bin/../include/c++/v1/new:271:10
    #2 0x55def600faf2 in __libcpp_allocate /usr/local/bin/../include/c++/v1/new:295:10
    #3 0x55def600faf2 in allocate /usr/local/bin/../include/c++/v1/__memory/allocator.h:125:32
    #4 0x55def600faf2 in __allocate_at_least<std::__1::allocator<char> > /usr/local/bin/../include/c++/v1/__memory/allocate_at_least.h:55:19
    #5 0x55def600faf2 in __split_buffer /usr/local/bin/../include/c++/v1/__split_buffer:343:25
    #6 0x55def600faf2 in char* std::__1::vector<char, std::__1::allocator<char>>::__push_back_slow_path<char const&>(char const&) /usr/local/bin/../include/c++/v1/vector:1451:47
    #7 0x55def5fedd21 in push_back /usr/local/bin/../include/c++/v1/vector:1467:13
    #8 0x55def5fedd21 in operator= /usr/local/bin/../include/c++/v1/__iterator/back_insert_iterator.h:57:16
    #9 0x55def5fedd21 in operator()<const char *, const char *, std::__1::back_insert_iterator<std::__1::vector<char, std::__1::allocator<char> > > > /usr/local/bin/../include/c++/v1/__algorithm/copy.h:40:17
    #10 0x55def5fedd21 in __unwrap_and_dispatch<std::__1::__overload<std::__1::__copy_loop<std::__1::_ClassicAlgPolicy>, std::__1::__copy_trivial>, const char *, const char *, std::__1::back_insert_iterator<std::__1::vector<char, std::__1::allocator<char> > >, 0> /usr/local/bin/../include/c++/v1/__algorithm/copy_move_common.h:109:19
    #11 0x55def5fedd21 in __dispatch_copy_or_move<std::__1::_ClassicAlgPolicy, std::__1::__copy_loop<std::__1::_ClassicAlgPolicy>, std::__1::__copy_trivial, const char *, const char *, std::__1::back_insert_iterator<std::__1::vector<char, std::__1::allocator<char> > > > /usr/local/bin/../include/c++/v1/__algorithm/copy_move_common.h:133:10
    #12 0x55def5fedd21 in __copy<std::__1::_ClassicAlgPolicy, const char *, const char *, std::__1::back_insert_iterator<std::__1::vector<char, std::__1::allocator<char> > > > /usr/local/bin/../include/c++/v1/__algorithm/copy.h:111:10
    #13 0x55def5fedd21 in copy<const char *, std::__1::back_insert_iterator<std::__1::vector<char, std::__1::allocator<char> > > > /usr/local/bin/../include/c++/v1/__algorithm/copy.h:118:10
    #14 0x55def5fedd21 in feed /src/pistache/src/../include/pistache/stream.h:111:13
    #15 0x55def5fedd21 in Pistache::Http::Private::ParserBase::feed(char const*, unsigned long) /src/pistache/src/common/http.cc:558:27
    #16 0x55def5fcff3d in fuzz_request_parser(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) /src/pistache/build/../tests/fuzzers/fuzz_parser.cpp:79:17
    #17 0x55def5fd3290 in LLVMFuzzerTestOneInput /src/pistache/build/../tests/fuzzers/fuzz_parser.cpp:153:9
    #18 0x55def5e808d0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #19 0x55def5e6bb45 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #20 0x55def5e715df in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #21 0x55def5e9c882 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #22 0x7fa718e50082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0323ab4806bee6f846d9ad4bccfc29afdca49a58)

DEDUP_TOKEN: operator new(unsigned long)--__libcpp_operator_new<unsigned long>--__libcpp_allocate
HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_container_overflow=0.
If you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.
SUMMARY: AddressSanitizer: container-overflow /src/pistache/src/common/http.cc:460:35 in Pistache::Http::Private::BodyStep::Chunk::parse(Pistache::StreamCursor&)
Shadow bytes around the buggy address:
  0x505fffffff00: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x505fffffff80: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x506000000000: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[35mfd[1m[0m [1m[35mfd[1m[0m [1m[35mfd[1m[0m [1m[35mfd[1m[0m [1m[35mfd[1m[0m [1m[35mfd[1m[0m [1m[35mfd[1m[0m [1m[35mfd[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x506000000080: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m03[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m
  0x506000000100: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m
=>0x506000000180: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m[[1m[0m02[1m[0m][1m[34mfc[1m[0m [1m[34mfc[1m[0m [1m[34mfc[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x506000000200: [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[0m00[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x506000000280: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x506000000300: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x506000000380: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
  0x506000000400: [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m [1m[31mfa[1m[0m
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           [1m[0m00[1m[0m
  Partially addressable: [1m[0m01[1m[0m [1m[0m02[1m[0m [1m[0m03[1m[0m [1m[0m04[1m[0m [1m[0m05[1m[0m [1m[0m06[1m[0m [1m[0m07[1m[0m 
  Heap left redzone:       [1m[31mfa[1m[0m
  Freed heap region:       [1m[35mfd[1m[0m
  Stack left redzone:      [1m[31mf1[1m[0m
  Stack mid redzone:       [1m[31mf2[1m[0m
  Stack right redzone:     [1m[31mf3[1m[0m
  Stack after return:      [1m[35mf5[1m[0m
  Stack use after scope:   [1m[35mf8[1m[0m
  Global redzone:          [1m[31mf9[1m[0m
  Global init order:       [1m[36mf6[1m[0m
  Poisoned by user:        [1m[34mf7[1m[0m
  Container overflow:      [1m[34mfc[1m[0m
  Array cookie:            [1m[31mac[1m[0m
  Intra object redzone:    [1m[33mbb[1m[0m
  ASan internal:           [1m[33mfe[1m[0m
  Left alloca redzone:     [1m[34mca[1m[0m
  Right alloca redzone:    [1m[34mcb[1m[0m
==14==ABORTING

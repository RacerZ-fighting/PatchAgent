The sanitizer detected a container overflow vulnerability. The explanation of the vulnerability is: A data structure, such as a vector or list, is accessed beyond its allocated memory, causing memory corruption or unexpected behavior. Here is the detail: 

READ of size 4 at 0x53100003c88e thread T0
    - MemcmpInterceptorCommon(void*, int (*)(void const*, void const*, unsigned long), void const*, void const*, unsigned long) /src/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:813:7
    - memcmp /src/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:845:10
    - isIrb /src/exiv2/src/jpgimage.cpp:109:17
    - Exiv2::Photoshop::locateIrb(unsigned char const*, unsigned long, unsigned short, unsigned char const**, unsigned int*, unsigned int*) /src/exiv2/src/jpgimage.cpp:153:47
    - locateIptcIrb /src/exiv2/src/jpgimage.cpp:220:16
    - Exiv2::Photoshop::setIptcIrb(unsigned char const*, unsigned long, Exiv2::IptcData const&) /src/exiv2/src/jpgimage.cpp:275:21
    - Exiv2::JpegBase::doWriteMetadata(Exiv2::BasicIo&) /src/exiv2/src/jpgimage.cpp:1131:41
    - Exiv2::JpegBase::writeMetadata() /src/exiv2/src/jpgimage.cpp:853:9
    - LLVMFuzzerTestOneInput /src/exiv2/fuzz/fuzz-read-print-write.cpp:44:12
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10

0x53100003c88e is located 142 bytes inside of 65536-byte region [0x53100003c800,0x53100004c800)
allocated by thread T0 here:
    - operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:86:3
    - __libcpp_operator_new<unsigned long> /usr/local/include/c++/v1/new:271:10
    - __libcpp_allocate /usr/local/include/c++/v1/new:295:10
    - allocate /usr/local/include/c++/v1/__memory/allocator.h:125:32
    - __allocate_at_least<std::__1::allocator<unsigned char> > /usr/local/include/c++/v1/__memory/allocate_at_least.h:55:19
    - __split_buffer /usr/local/include/c++/v1/__split_buffer:343:25
    - std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>::reserve(unsigned long) /usr/local/include/c++/v1/vector:1425:49
    - Exiv2::append(std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>&, unsigned char const*, unsigned long) /src/exiv2/src/image.cpp:946:22
    - Exiv2::JpegBase::doWriteMetadata(Exiv2::BasicIo&) /src/exiv2/src/jpgimage.cpp:962:17
    - Exiv2::JpegBase::writeMetadata() /src/exiv2/src/jpgimage.cpp:853:9
    - LLVMFuzzerTestOneInput /src/exiv2/fuzz/fuzz-read-print-write.cpp:44:12
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10

HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_container_overflow=0.
If you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.

To fix this issue, follow the advice below:

1. If overflow is unavoidable, allocate a sufficiently large buffer during initialization.
2. Add explicit bounds checking before accessing arrays or buffers to prevent overflows.
3. Replace unsafe functions like memcpy, strcpy, strcat, and sprintf with safer alternatives such as strncpy, strncat, and snprintf.
4. Check for integer overflows in size calculations that could cause improper memory allocations.

The sanitizer detected a container overflow vulnerability. The explanation of the vulnerability is: A data structure, such as a vector or list, is accessed beyond its allocated memory, causing memory corruption or unexpected behavior. Here is the detail: 

[1m[0m[1m[34mWRITE of size 65534 at 0x7fe04ad4c802 thread T0[1m[0m
    - memcpy /src/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors_memintrinsics.inc:115:5
    - Exiv2::BmffImage::brotliUncompress(unsigned char const*, unsigned long, Exiv2::DataBuf&) /src/exiv2/src/bmffimage.cpp:208:9
    - Exiv2::BmffImage::boxHandler(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, Exiv2::PrintStructureOption, unsigned long, unsigned long) /src/exiv2/src/bmffimage.cpp:541:7
    - Exiv2::BmffImage::readMetadata() /src/exiv2/src/bmffimage.cpp:727:15
    - LLVMFuzzerTestOneInput /src/exiv2/fuzz/fuzz-read-print-write.cpp:22:12
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10

[1m[32m0x7fe04ad4c802 is located 0 bytes after 131074-byte region [0x7fe04ad2c800,0x7fe04ad4c802)
[1m[0m[1m[35mallocated by thread T0 here:[1m[0m
    - operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:86:3
    - __libcpp_operator_new<unsigned long> /usr/local/include/c++/v1/new:271:10
    - __libcpp_allocate /usr/local/include/c++/v1/new:295:10
    - allocate /usr/local/include/c++/v1/__memory/allocator.h:125:32
    - __allocate_at_least<std::__1::allocator<unsigned char> > /usr/local/include/c++/v1/__memory/allocate_at_least.h:55:19
    - __split_buffer /usr/local/include/c++/v1/__split_buffer:343:25
    - std::__1::vector<unsigned char, std::__1::allocator<unsigned char>>::__append(unsigned long) /usr/local/include/c++/v1/vector:1095:49
    - Exiv2::BmffImage::brotliUncompress(unsigned char const*, unsigned long, Exiv2::DataBuf&) /src/exiv2/src/bmffimage.cpp:204:9
    - Exiv2::BmffImage::boxHandler(std::__1::basic_ostream<char, std::__1::char_traits<char>>&, Exiv2::PrintStructureOption, unsigned long, unsigned long) /src/exiv2/src/bmffimage.cpp:541:7
    - Exiv2::BmffImage::readMetadata() /src/exiv2/src/bmffimage.cpp:727:15
    - LLVMFuzzerTestOneInput /src/exiv2/fuzz/fuzz-read-print-write.cpp:22:12
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10

HINT: if you don't care about these errors you may set ASAN_OPTIONS=detect_container_overflow=0.
If you suspect a false positive see also: https://github.com/google/sanitizers/wiki/AddressSanitizerContainerOverflow.

To fix this issue, follow the advice below:

1. If overflow is unavoidable, allocate a sufficiently large buffer during initialization.
2. Add explicit bounds checking before accessing arrays or buffers to prevent overflows.
3. Replace unsafe functions like memcpy, strcpy, strcat, and sprintf with safer alternatives such as strncpy, strncat, and snprintf.
4. Check for integer overflows in size calculations that could cause improper memory allocations.

The sanitizer detected a stack overflow vulnerability.The explanation of the vulnerability is: Excessive function calls lead to stack exhaustion, causing the program to crash or behave unpredictably.Here is the detail: 

- org.threeten.bp.format.DateTimeFormatterBuilder$CompositePrinterParser.parse (org/threeten/bp/format/DateTimeFormatterBuilder$CompositePrinterParser/parse:2014)
- java.base/java.math.BigDecimal.add (java/base/java/math/BigDecimal.java:4783)
- java.base/java.math.BigDecimal.subtract (java/base/java/math/BigDecimal.java:1460)
- org.threeten.bp.format.DateTimeFormatterBuilder$FractionPrinterParser.convertFromFraction (org/threeten/bp/format/DateTimeFormatterBuilder$FractionPrinterParser/convertFromFraction:2811)
- org.threeten.bp.format.DateTimeFormatterBuilder$FractionPrinterParser.parse (org/threeten/bp/format/DateTimeFormatterBuilder$FractionPrinterParser/parse:2761)
- org.threeten.bp.format.DateTimeFormatterBuilder$CompositePrinterParser.parse (org/threeten/bp/format/DateTimeFormatterBuilder$CompositePrinterParser/parse:2014)
- org.threeten.bp.format.DateTimeFormatterBuilder$CompositePrinterParser.parse (org/threeten/bp/format/DateTimeFormatterBuilder$CompositePrinterParser/parse:2014)
- org.threeten.bp.format.DateTimeFormatterBuilder$CompositePrinterParser.parse (org/threeten/bp/format/DateTimeFormatterBuilder$CompositePrinterParser/parse:2014)
- org.threeten.bp.format.DateTimeFormatterBuilder$CompositePrinterParser.parse (org/threeten/bp/format/DateTimeFormatterBuilder$CompositePrinterParser/parse:2014)
- org.threeten.bp.format.DateTimeFormatterBuilder$CompositePrinterParser.parse (org/threeten/bp/format/DateTimeFormatterBuilder$CompositePrinterParser/parse:2014)
- org.threeten.bp.format.DateTimeFormatterBuilder$CompositePrinterParser.parse (org/threeten/bp/format/DateTimeFormatterBuilder$CompositePrinterParser/parse:2014)
- org.threeten.bp.format.DateTimeFormatterBuilder$CompositePrinterParser.parse (org/threeten/bp/format/DateTimeFormatterBuilder$CompositePrinterParser/parse:2014)
  ... more stack frames


To fix this issue, follow the advice below:

1. Avoid deep recursion by implementing iterative solutions where possible.
2. Increase the stack size if necessary to accommodate recursion.
3. Reduce function call depth by refactoring complex recursive functions.
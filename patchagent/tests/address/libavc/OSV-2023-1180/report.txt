=================================================================
==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7f9f3f4ff06c at pc 0x5640c99553d3 bp 0x7ffc9ab60c30 sp 0x7ffc9ab60c28
READ of size 4 at 0x7f9f3f4ff06c thread T0
SCARINESS: 17 (4-byte-read-heap-buffer-overflow)
    #0 0x5640c99553d2 in ih264d_sev /src/libavc/decoder/ih264d_parse_cavlc.c:139:9
    #1 0x5640c999ed9e in ih264d_parse_fgc /src/libavc/decoder/ih264d_sei.c:865:38
    #2 0x5640c999fde4 in ih264d_parse_sei_message /src/libavc/decoder/ih264d_sei.c:1081:21
    #3 0x5640c9962f49 in ih264d_parse_nal_unit /src/libavc/decoder/ih264d_parse_headers.c:1322:36
    #4 0x5640c9890987 in imvcd_view_decode /src/libavc/decoder/mvc/imvcd_api.c:815:17
    #5 0x5640c9890987 in imvcd_decode /src/libavc/decoder/mvc/imvcd_api.c:1230:20
    #6 0x5640c9890987 in imvcd_api_function /src/libavc/decoder/mvc/imvcd_api.c:1592:20
    #7 0x5640c988d1bf in Codec::decodeFrame(unsigned char const*, unsigned long, unsigned long*) /src/libavc/fuzzer/mvc_dec_fuzzer.cpp:339:11
    #8 0x5640c988de36 in LLVMFuzzerTestOneInput /src/libavc/fuzzer/mvc_dec_fuzzer.cpp:400:43
    #9 0x5640c9740350 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #10 0x5640c972b5c5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #11 0x5640c973105f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #12 0x5640c975c302 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #13 0x7f9f414ef082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #14 0x5640c97237ad in _start (/out/mvc_dec_fuzzer+0x857ad)

DEDUP_TOKEN: ih264d_sev--ih264d_parse_fgc--ih264d_parse_sei_message
0x7f9f3f4ff06e is located 0 bytes after 366702-byte region [0x7f9f3f4a5800,0x7f9f3f4ff06e)
allocated by thread T0 here:
    #0 0x5640c984cbc7 in posix_memalign /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:142:3
    #1 0x5640c988bc46 in mvcd_aligned_malloc(void*, int, int) /src/libavc/fuzzer/mvc_dec_fuzzer.cpp:61:13
    #2 0x5640c989933b in imvcd_bitstream_buf_alloc /src/libavc/decoder/mvc/imvcd_api_utils.c:381:9
    #3 0x5640c98904c3 in imvcd_view_decode /src/libavc/decoder/mvc/imvcd_api.c:701:16
    #4 0x5640c98904c3 in imvcd_decode /src/libavc/decoder/mvc/imvcd_api.c:1230:20
    #5 0x5640c98904c3 in imvcd_api_function /src/libavc/decoder/mvc/imvcd_api.c:1592:20
    #6 0x5640c988d1bf in Codec::decodeFrame(unsigned char const*, unsigned long, unsigned long*) /src/libavc/fuzzer/mvc_dec_fuzzer.cpp:339:11
    #7 0x5640c988de36 in LLVMFuzzerTestOneInput /src/libavc/fuzzer/mvc_dec_fuzzer.cpp:400:43
    #8 0x5640c9740350 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #9 0x5640c972b5c5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #10 0x5640c973105f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #11 0x5640c975c302 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #12 0x7f9f414ef082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: ___interceptor_posix_memalign--mvcd_aligned_malloc(void*, int, int)--imvcd_bitstream_buf_alloc
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libavc/decoder/ih264d_parse_cavlc.c:139:9 in ih264d_sev
Shadow bytes around the buggy address:
  0x7f9f3f4fed80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9f3f4fee00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9f3f4fee80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9f3f4fef00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f9f3f4fef80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7f9f3f4ff000: 00 00 00 00 00 00 00 00 00 00 00 00 00[06]fa fa
  0x7f9f3f4ff080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f9f3f4ff100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f9f3f4ff180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f9f3f4ff200: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f9f3f4ff280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==14==ABORTING

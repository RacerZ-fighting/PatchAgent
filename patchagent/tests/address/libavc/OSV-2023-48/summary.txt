The sanitizer detected a global buffer overflow vulnerability.The explanation of the vulnerability is: A buffer overflow occurs in globally allocated memory, leading to memory corruption or crashes..Here is the detail: 

READ of size 1 at 0x556a812c2f09 thread T0
    - isvce_write_coeff4x4_cavlc /src/libavc/encoder/svc/isvce_cavlc.c:0:0
    - isvce_encode_residue /src/libavc/encoder/svc/isvce_cavlc.c:893:13
    - isvce_write_pslice_mb_cavlc /src/libavc/encoder/svc/isvce_cavlc.c:1587:20
    - isvce_entropy /src/libavc/encoder/svc/isvce_process.c:903:13
    - isvce_process_thread /src/libavc/encoder/svc/isvce_process.c:2775:32
    - isvce_encode /src/libavc/encoder/svc/isvce_encode.c:484:13
    - isvce_api_function /src/libavc/encoder/svc/isvce_api.c:6045:19
    - Codec::encodeFrames(unsigned char const*, unsigned long) /src/libavc/fuzzer/svc_enc_fuzzer.cpp:1263:9
    - LLVMFuzzerTestOneInput /src/libavc/fuzzer/svc_enc_fuzzer.cpp:1339:16
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10

0x556a812c2f09 is located 55 bytes before global variable 'gu1_index_zero_table' defined in '/src/libavc/common/ih264_cavlc_tables.c' (0x556a812c2f40) of size 15
0x556a812c2f09 is located 23 bytes before global variable 'gu1_code_zero_table_chroma' defined in '/src/libavc/common/ih264_cavlc_tables.c' (0x556a812c2f20) of size 9
0x556a812c2f09 is located 0 bytes after global variable 'gu1_size_zero_table_chroma' defined in '/src/libavc/common/ih264_cavlc_tables.c' (0x556a812c2f00) of size 9

To fix this issue, follow the advice below:

1. If overflow is unavoidable, allocate a sufficiently large buffer during initialization.
2. Add explicit bounds checking before accessing arrays or buffers to prevent overflows.
3. Replace unsafe functions like memcpy, strcpy, strcat, and sprintf with safer alternatives such as strncpy, strncat, and snprintf.
4. Check for integer overflows in size calculations that could cause improper memory allocations.

=================================================================
==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7f3aca15f6fc at pc 0x555a5a741ae7 bp 0x7ffe58802790 sp 0x7ffe58802788
READ of size 4 at 0x7f3aca15f6fc thread T0
SCARINESS: 17 (4-byte-read-heap-buffer-overflow)
    #0 0x555a5a741ae6 in ih264d_get_bits_h264 /src/libavc/decoder/ih264d_bitstrm.c:94:9
    #1 0x555a5a7d397f in ih264d_parse_fgc /src/libavc/decoder/ih264d_sei.c:860:34
    #2 0x555a5a7d4a04 in ih264d_parse_sei_message /src/libavc/decoder/ih264d_sei.c:1081:21
    #3 0x555a5a797419 in ih264d_parse_nal_unit /src/libavc/decoder/ih264d_parse_headers.c:1322:36
    #4 0x555a5a6c3a79 in imvcd_view_decode /src/libavc/decoder/mvc/imvcd_api.c:823:17
    #5 0x555a5a6c3a79 in imvcd_decode /src/libavc/decoder/mvc/imvcd_api.c:1238:20
    #6 0x555a5a6c3a79 in imvcd_api_function /src/libavc/decoder/mvc/imvcd_api.c:1600:20
    #7 0x555a5a6c01cf in Codec::decodeFrame(unsigned char const*, unsigned long, unsigned long*) /src/libavc/fuzzer/mvc_dec_fuzzer.cpp:339:11
    #8 0x555a5a6c0e46 in LLVMFuzzerTestOneInput /src/libavc/fuzzer/mvc_dec_fuzzer.cpp:400:43
    #9 0x555a5a573360 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #10 0x555a5a55e5d5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #11 0x555a5a56406f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #12 0x555a5a58f312 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #13 0x7f3acbea6082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #14 0x555a5a5567bd in _start (/out/mvc_dec_fuzzer+0x867bd)

DEDUP_TOKEN: ih264d_get_bits_h264--ih264d_parse_fgc--ih264d_parse_sei_message
0x7f3aca15f6fc is located 0 bytes after 257788-byte region [0x7f3aca120800,0x7f3aca15f6fc)
allocated by thread T0 here:
    #0 0x555a5a67fbd7 in posix_memalign /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:142:3
    #1 0x555a5a6bec56 in mvcd_aligned_malloc(void*, int, int) /src/libavc/fuzzer/mvc_dec_fuzzer.cpp:61:13
    #2 0x555a5a6cc828 in imvcd_bitstream_buf_realloc /src/libavc/decoder/mvc/imvcd_api_utils.c:402:9
    #3 0x555a5a6c364c in imvcd_view_decode /src/libavc/decoder/mvc/imvcd_api.c:740:34
    #4 0x555a5a6c364c in imvcd_decode /src/libavc/decoder/mvc/imvcd_api.c:1238:20
    #5 0x555a5a6c364c in imvcd_api_function /src/libavc/decoder/mvc/imvcd_api.c:1600:20
    #6 0x555a5a6bfbc6 in Codec::decodeHeader(unsigned char const*, unsigned long) /src/libavc/fuzzer/mvc_dec_fuzzer.cpp:280:15
    #7 0x555a5a6c0b8c in LLVMFuzzerTestOneInput /src/libavc/fuzzer/mvc_dec_fuzzer.cpp:380:18
    #8 0x555a5a573360 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #9 0x555a5a55e5d5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #10 0x555a5a56406f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #11 0x555a5a58f312 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #12 0x7f3acbea6082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: ___interceptor_posix_memalign--mvcd_aligned_malloc(void*, int, int)--imvcd_bitstream_buf_realloc
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libavc/decoder/ih264d_bitstrm.c:94:9 in ih264d_get_bits_h264
Shadow bytes around the buggy address:
  0x7f3aca15f400: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f3aca15f480: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f3aca15f500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f3aca15f580: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f3aca15f600: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7f3aca15f680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00[04]
  0x7f3aca15f700: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f3aca15f780: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f3aca15f800: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f3aca15f880: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f3aca15f900: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==14==ABORTING

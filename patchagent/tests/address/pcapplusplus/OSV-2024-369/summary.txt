The sanitizer detected a heap use after free vulnerability.The explanation of the vulnerability is: Memory is accessed after it has been freed, leading to undefined behavior and security risks..Here is the detail: 

READ of size 1 at 0x508000006550 thread T0
    - canAssign /src/PcapPlusPlus/Packet++/header/DhcpLayer.h:485:14
    - getFirstTLVRecord /src/PcapPlusPlus/Packet++/header/TLVData.h:293:9
    - pcpp::TLVRecordReader<pcpp::DhcpOption>::getTLVRecord(unsigned int, unsigned char*, unsigned long) const /src/PcapPlusPlus/Packet++/header/TLVData.h:355:27
    - getOptionData /src/PcapPlusPlus/Packet++/src/DhcpLayer.cpp:204:25
    - getMessageType /src/PcapPlusPlus/Packet++/src/DhcpLayer.cpp:178:20
    - pcpp::DhcpLayer::toString() const /src/PcapPlusPlus/Packet++/src/DhcpLayer.cpp:127:11
    - LLVMFuzzerTestOneInput /src/PcapPlusPlus/Tests/Fuzzers/FuzzTarget.cpp:64:25
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10

0x508000006550 is located 48 bytes inside of 96-byte region [0x508000006520,0x508000006580)
freed by thread T0 here:
    - operator delete(void*) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:143:3
    - __libcpp_operator_delete<void *> /usr/local/include/c++/v1/new:280:3
    - __do_deallocate_handle_size<> /usr/local/include/c++/v1/new:302:10
    - __libcpp_deallocate /usr/local/include/c++/v1/new:311:10
    - deallocate /usr/local/include/c++/v1/__memory/allocator.h:139:7
    - deallocate /usr/local/include/c++/v1/__memory/allocator_traits.h:289:9
    - ~basic_string /usr/local/include/c++/v1/string:1105:7
    - destroy /usr/local/include/c++/v1/__memory/allocator.h:176:87
    - destroy<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, void> /usr/local/include/c++/v1/__memory/allocator_traits.h:311:9
    - __base_destruct_at_end /usr/local/include/c++/v1/vector:926:7
    - __clear /usr/local/include/c++/v1/vector:920:5
    - operator() /usr/local/include/c++/v1/vector:490:16
    - ~vector /usr/local/include/c++/v1/vector:501:67
    - pcpp::Packet::toString(bool) const /src/PcapPlusPlus/Packet++/src/Packet.cpp:824:2
    - LLVMFuzzerTestOneInput /src/PcapPlusPlus/Tests/Fuzzers/FuzzTarget.cpp:60:17
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10

previously allocated by thread T0 here:
    - operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:86:3


To fix this issue, follow the advice below:

1. Set pointers to NULL immediately after freeing them to prevent accidental reuse.
2. Ensure that each allocated memory block is freed only once.
3. Track memory allocations and deallocations systematically to prevent use-after-free conditions.
4. Consider swap the order of freeing memory and accessing it.
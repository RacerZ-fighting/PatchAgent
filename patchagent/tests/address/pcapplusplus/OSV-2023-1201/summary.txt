The sanitizer detected a negative size param vulnerability.The explanation of the vulnerability is: A function receives a negative size parameter, leading to unexpected behavior or memory allocation errors..Here is the detail: 

    - __asan_memmove /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:71:3
    - pcpp::RawPacket::insertData(int, unsigned char const*, unsigned long) /src/PcapPlusPlus/Packet++/src/RawPacket.cpp:153:3
    - pcpp::Packet::extendLayer(pcpp::Layer*, int, unsigned long) /src/PcapPlusPlus/Packet++/src/Packet.cpp:597:16
    - pcpp::BgpUpdateMessageLayer::setNetworkLayerReachabilityInfo(std::__1::vector<pcpp::BgpUpdateMessageLayer::prefix_and_ip, std::__1::allocator<pcpp::BgpUpdateMessageLayer::prefix_and_ip>> const&) /src/PcapPlusPlus/Packet++/src/BgpLayer.cpp:742:15
    - readParsedPacket(pcpp::Packet, pcpp::Layer*) /src/PcapPlusPlus/Tests/Fuzzers/ReadParsedPacket.h:459:24
    - LLVMFuzzerTestOneInput /src/PcapPlusPlus/Tests/Fuzzers/FuzzTarget.cpp:66:5
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10

Address 0x5160000023ee is a wild pointer inside of access range of size 0x000000000001.

To fix this issue, follow the advice below:

1. Validate all size parameters before passing them to memory allocation functions.
2. Ensure that buffer sizes and loop limits are always positive values.
3. Use unsigned integer types to store sizes to prevent negative values.
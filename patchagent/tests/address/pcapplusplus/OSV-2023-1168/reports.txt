=================================================================
==18==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x50300000c65f at pc 0x561942c2b2ca bp 0x7ffd0b5d12d0 sp 0x7ffd0b5d12c8
WRITE of size 2 at 0x50300000c65f thread T0
SCARINESS: 33 (2-byte-write-heap-buffer-overflow)
    #0 0x561942c2b2c9 in pcpp::PPP_PPTPLayer::computeCalculateFields() /src/PcapPlusPlus/Packet++/src/GreLayer.cpp
    #1 0x561942c68087 in pcpp::Packet::computeCalculateFields() /src/PcapPlusPlus/Packet++/src/Packet.cpp:687:14
    #2 0x561942bb7901 in LLVMFuzzerTestOneInput /src/PcapPlusPlus/Tests/Fuzzers/FuzzTarget.cpp:69:17
    #3 0x561942a6b1d0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #4 0x561942a56445 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #5 0x561942a5bedf in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #6 0x561942a87182 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #7 0x7fa80dbaa082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #8 0x561942a4e62d in _start (/out/FuzzTarget+0x1b762d)

DEDUP_TOKEN: pcpp::PPP_PPTPLayer::computeCalculateFields()--pcpp::Packet::computeCalculateFields()--LLVMFuzzerTestOneInput
0x50300000c65f is located 0 bytes after 31-byte region [0x50300000c640,0x50300000c65f)
allocated by thread T0 here:
    #0 0x561942bb447d in operator new[](unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:89:3
    #1 0x561942bcb980 in pcpp::PcapFileReaderDevice::getNextPacket(pcpp::RawPacket&) /src/PcapPlusPlus/Pcap++/src/PcapFileDevice.cpp:338:28
    #2 0x561942bc72b4 in pcpp::IFileReaderDevice::getNextPackets(pcpp::PointerVector<pcpp::RawPacket>&, int) /src/PcapPlusPlus/Pcap++/src/PcapFileDevice.cpp:117:22
    #3 0x561942bb74f7 in LLVMFuzzerTestOneInput /src/PcapPlusPlus/Tests/Fuzzers/FuzzTarget.cpp:46:14
    #4 0x561942a6b1d0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #5 0x561942a56445 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #6 0x561942a5bedf in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #7 0x561942a87182 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #8 0x7fa80dbaa082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: operator new[](unsigned long)--pcpp::PcapFileReaderDevice::getNextPacket(pcpp::RawPacket&)--pcpp::IFileReaderDevice::getNextPackets(pcpp::PointerVector<pcpp::RawPacket>&, int)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/PcapPlusPlus/Packet++/src/GreLayer.cpp in pcpp::PPP_PPTPLayer::computeCalculateFields()
Shadow bytes around the buggy address:
  0x50300000c380: 00 00 fa fa 00 00 00 00 fa fa 00 00 00 00 fa fa
  0x50300000c400: 00 00 00 00 fa fa 00 00 00 00 fa fa 00 00 00 02
  0x50300000c480: fa fa 00 00 00 02 fa fa 00 00 00 02 fa fa 00 00
  0x50300000c500: 00 00 fa fa 00 00 00 00 fa fa 00 00 00 02 fa fa
  0x50300000c580: 00 00 00 fa fa fa 00 00 00 fa fa fa 00 00 00 fa
=>0x50300000c600: fa fa 00 00 00 00 fa fa 00 00 00[07]fa fa 00 00
  0x50300000c680: 01 fa fa fa 00 00 04 fa fa fa fd fd fd fa fa fa
  0x50300000c700: fd fd fd fd fa fa fd fd fd fd fa fa fd fd fd fd
  0x50300000c780: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x50300000c800: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x50300000c880: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==18==ABORTING

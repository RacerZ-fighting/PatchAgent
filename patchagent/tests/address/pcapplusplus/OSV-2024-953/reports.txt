=================================================================
==18==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x5030000004d8 at pc 0x558849661472 bp 0x7fffa32e8b30 sp 0x7fffa32e82f0
READ of size 1114116 at 0x5030000004d8 thread T0
SCARINESS: 26 (multi-byte-read-heap-buffer-overflow)
    #0 0x558849661471 in __asan_memcpy /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:63:3
    #1 0x5588496ada54 in pcpp::PcapNgFileReaderDevice::getNextPacket(pcpp::RawPacket&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&) /src/PcapPlusPlus/Pcap++/src/PcapFileDevice.cpp:420:3
    #2 0x5588496ae915 in pcpp::PcapNgFileReaderDevice::getNextPacket(pcpp::RawPacket&) /src/PcapPlusPlus/Pcap++/src/PcapFileDevice.cpp:444:10
    #3 0x5588496a39be in LLVMFuzzerTestOneInput /src/PcapPlusPlus/Tests/Fuzzers/FuzzWriter.cpp:70:19
    #4 0x5588495577b0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #5 0x558849542a25 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #6 0x5588495484bf in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #7 0x558849573762 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #8 0x7f59f9e98082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #9 0x55884953ac0d in _start (/out/FuzzWriterNg+0xb8c0d)

DEDUP_TOKEN: __asan_memcpy--pcpp::PcapNgFileReaderDevice::getNextPacket(pcpp::RawPacket&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)--pcpp::PcapNgFileReaderDevice::getNextPacket(pcpp::RawPacket&)
0x5030000004d8 is located 0 bytes after 24-byte region [0x5030000004c0,0x5030000004d8)
allocated by thread T0 here:
    #0 0x558849663749 in calloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:75:3
    #1 0x5588496cdf6d in parse_by_block_type /src/PcapPlusPlus/3rdParty/LightPcapNg/LightPcapNg/src/light_pcapng.c:171:16
    #2 0x5588496cef0c in light_read_record /src/PcapPlusPlus/3rdParty/LightPcapNg/LightPcapNg/src/light_pcapng.c:356:4
    #3 0x5588496cc731 in light_get_next_packet /src/PcapPlusPlus/3rdParty/LightPcapNg/LightPcapNg/src/light_pcapng_ext.c:384:2
    #4 0x5588496ad7dd in pcpp::PcapNgFileReaderDevice::getNextPacket(pcpp::RawPacket&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&) /src/PcapPlusPlus/Pcap++/src/PcapFileDevice.cpp:403:8
    #5 0x5588496ae915 in pcpp::PcapNgFileReaderDevice::getNextPacket(pcpp::RawPacket&) /src/PcapPlusPlus/Pcap++/src/PcapFileDevice.cpp:444:10
    #6 0x5588496a39be in LLVMFuzzerTestOneInput /src/PcapPlusPlus/Tests/Fuzzers/FuzzWriter.cpp:70:19
    #7 0x5588495577b0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #8 0x558849542a25 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #9 0x5588495484bf in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #10 0x558849573762 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #11 0x7f59f9e98082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: __interceptor_calloc--parse_by_block_type--light_read_record
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/PcapPlusPlus/Pcap++/src/PcapFileDevice.cpp:420:3 in pcpp::PcapNgFileReaderDevice::getNextPacket(pcpp::RawPacket&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&)
Shadow bytes around the buggy address:
  0x503000000200: fd fd fa fa fd fd fd fd fa fa fd fd fd fd fa fa
  0x503000000280: fd fd fd fa fa fa fd fd fd fa fa fa fd fd fd fd
  0x503000000300: fa fa fd fd fd fa fa fa fd fd fd fa fa fa fd fd
  0x503000000380: fd fd fa fa fd fd fd fa fa fa fd fd fd fa fa fa
  0x503000000400: fd fd fd fd fa fa fd fd fd fa fa fa fd fd fd fa
=>0x503000000480: fa fa 00 00 00 00 fa fa 00 00 00[fa]fa fa fa fa
  0x503000000500: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x503000000580: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x503000000600: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x503000000680: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x503000000700: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==18==ABORTING

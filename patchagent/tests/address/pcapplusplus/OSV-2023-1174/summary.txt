The sanitizer detected a stack buffer overflow vulnerability.The explanation of the vulnerability is: A function writes more data to a local stack variable than it can hold, overwriting adjacent memory and potentially leading to execution hijacking..Here is the detail: 

READ of size 5 at 0x7f523dc04b24 thread T0
    - strlen /src/llvm-project/compiler-rt/lib/sanitizer_common/sanitizer_common_interceptors.inc:391:5
    - __constexpr_strlen /usr/local/include/c++/v1/__string/constexpr_c_functions.h:49:10
    - length /usr/local/include/c++/v1/__string/char_traits.h:227:12
    - std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::basic_string[abi:ne180100]<0>(char const*) /usr/local/include/c++/v1/string:954:17
    - pcpp::NtpLayer::getReferenceIdentifierString() const /src/PcapPlusPlus/Packet++/src/NtpLayer.cpp:254:28
    - readParsedPacket(pcpp::Packet, pcpp::Layer*) /src/PcapPlusPlus/Tests/Fuzzers/ReadParsedPacket.h:292:23
    - LLVMFuzzerTestOneInput /src/PcapPlusPlus/Tests/Fuzzers/FuzzTarget.cpp:67:5
    - fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    - fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    - fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    - main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10

Address 0x7f523dc04b24 is located in stack of thread T0 at offset 36 in frame
    - pcpp::NtpLayer::getReferenceIdentifierString() const /src/PcapPlusPlus/Packet++/src/NtpLayer.cpp:191:0

  This frame has 2 object(s):
    [32, 36) 'arrBuff' (line 252) <== Memory access at offset 36 overflows this variable
    [48, 52) 'addr' (line 358)
HINT: this may be a false positive if your program uses some custom stack unwind mechanism, swapcontext or vfork
      (longjmp and C++ exceptions *are* supported)

To fix this issue, follow the advice below:

1. If overflow is unavoidable, allocate a sufficiently large buffer during initialization.
2. Add explicit bounds checking before accessing arrays or buffers to prevent overflows.
3. Replace unsafe functions like memcpy, strcpy, strcat, and sprintf with safer alternatives such as strncpy, strncat, and snprintf.
4. Check for integer overflows in size calculations that could cause improper memory allocations.

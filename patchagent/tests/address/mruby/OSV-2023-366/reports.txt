to_i
slice!
!
tr!
tr_s!
tap
to_s
rstrip
%
+
then
*
strip!
to_f
initialize
__sub_replace
upto
<
>
tr_s
rindex
__method__
`
__id__
Hash
byterindex
instance_of?
delete_prefix
between?
delete_suffix
bytesize
casecmp?
__callee__
__case_eqq
instance_exec
__to_int
String
unpack
__send__
upcase
instance_eval
to_str
p
codepoints
_inspect
capitalize
to_sym
Array
raise
instance_variable_defined?
Complex
print
remove_instance_variable
__printstr__
ord
<<
==
define_singleton_method
<=
block_given?
singleton_method_added
byteindex
__ENCODING__
instance_variable_set
byteslice
!~
!=
oct
next!
delete_suffix!
each_byte
downcase!
each_codepoint
yield_self
sub
srand
method_missing
split
instance_variable_get
strip
each_line
succ!
public_methods
each_char
__upto_endless
[]
instance_variables
end_with?
rjust
Rational
delete_prefix!
rpartition
Float
>=
slice
iterator?
<=>
hash
open
initialize_copy
gsub
local_variables
is_a?
printf
===
__lines
nil?
index
unpack1
partition
upcase!
gsub!
object_id
[]=
to_enum
method
singleton_class
lines
include?
private_methods
respond_to?
start_with?
ljust
kind_of?
setbyte
lstrip
fail
eval
loop
swapcase!
length
sprintf
eql?
squeeze
reverse
lambda
tr
itself
replace
gets
downcase
next
insert
global_variables
intern
rstrip!
Integer
enum_for
delete!
empty?
count
equal?
singleton_method
succ
dump
sub!
clear
extend
chomp
chop!
clone
hex
size
clamp
class
bytes
prepend
chop
send
format
chars
freeze
frozen?
caller
getbyte
singleton_methods
reverse!
chomp!
inspect
center
squeeze!
capitalize!
dup
proc
swapcase
lstrip!
chr
protected_methods
casecmp
delete
puts
rand
concat
methods
to_i
slice!
!
tr!
tr_s!
tap
to_s
rstrip
%
+
then
*
strip!
to_f
initialize
__sub_replace
upto
<
>
tr_s
rindex
__method__
`
__id__
Hash
byterindex
instance_of?
delete_prefix
between?
delete_suffix
bytesize
casecmp?
__callee__
__case_eqq
instance_exec
__to_int
String
unpack
__send__
upcase
instance_eval
to_str
p
codepoints
_inspect
capitalize
to_sym
Array
raise
instance_variable_defined?
Complex
print
remove_instance_variable
__printstr__
ord
<<
==
define_singleton_method
<=
block_given?
singleton_method_added
byteindex
__ENCODING__
instance_variable_set
byteslice
!~
!=
oct
next!
delete_suffix!
each_byte
downcase!
each_codepoint
yield_self
sub
srand
method_missing
split
instance_variable_get
strip
each_line
succ!
public_methods
each_char
__upto_endless
[]
instance_variables
end_with?
rjust
Rational
delete_prefix!
rpartition
Float
>=
slice
iterator?
<=>
hash
open
initialize_copy
gsub
local_variables
is_a?
printf
===
__lines
nil?
index
unpack1
partition
upcase!
gsub!
object_id
[]=
to_enum
method
singleton_class
lines
include?
private_methods
respond_to?
start_with?
ljust
kind_of?
setbyte
lstrip
fail
eval
loop
swapcase!
length
sprintf
eql?
squeeze
reverse
lambda
tr
itself
replace
gets
downcase
next
insert
global_variables
intern
rstrip!
Integer
enum_for
delete!
empty?
count
equal?
singleton_method
succ
dump
sub!
clear
extend
chomp
chop!
clone
hex
size
clamp
class
bytes
prepend
chop
send
format
chars
freeze
frozen?
caller
getbyte
singleton_methods
reverse!
chomp!
inspect
center
squeeze!
capitalize!
dup
proc
swapcase
lstrip!
chr
protected_methods
casecmp
delete
puts
rand
concat
methods
to_i
slice!
!
tr!
tr_s!
tap
to_s
rstrip
%
+
then
*
strip!
to_f
initialize
__sub_replace
upto
<
>
tr_s
rindex
__method__
`
__id__
Hash
byterindex
instance_of?
delete_prefix
between?
delete_suffix
bytesize
casecmp?
__callee__
__case_eqq
instance_exec
__to_int
String
unpack
__send__
upcase
instance_eval
to_str
p
codepoints
_inspect
capitalize
to_sym
Array
raise
instance_variable_defined?
Complex
print
remove_instance_variable
__printstr__
ord
<<
==
define_singleton_method
<=
block_given?
singleton_method_added
byteindex
__ENCODING__
instance_variable_set
byteslice
!~
!=
oct
next!
delete_suffix!
each_byte
downcase!
each_codepoint
yield_self
sub
srand
method_missing
split
instance_variable_get
strip
each_line
succ!
public_methods
each_char
__upto_endless
[]
instance_variables
end_with?
rjust
Rational
delete_prefix!
rpartition
Float
>=
slice
iterator?
<=>
hash
open
initialize_copy
gsub
local_variables
is_a?
printf
===
__lines
nil?
index
unpack1
partition
upcase!
gsub!
object_id
[]=
to_enum
method
singleton_class
lines
include?
private_methods
respond_to?
start_with?
ljust
kind_of?
setbyte
lstrip
fail
eval
loop
swapcase!
length
sprintf
eql?
squeeze
reverse
lambda
tr
itself
replace
gets
downcase
next
insert
global_variables
intern
rstrip!
Integer
enum_for
delete!
empty?
count
equal?
singleton_method
succ
dump
sub!
clear
extend
chomp
chop!
clone
hex
size
clamp
class
bytes
prepend
chop
send
format
chars
freeze
frozen?
caller
getbyte
singleton_methods
reverse!
chomp!
inspect
center
squeeze!
capitalize!
dup
proc
swapcase
lstrip!
chr
protected_methods
casecmp
delete
puts
rand
concat
methods
to_i
slice!
!
tr!
tr_s!
tap
to_s
rstrip
%
+
then
*
strip!
to_f
initialize
__sub_replace
upto
<
>
tr_s
rindex
__method__
`
__id__
Hash
byterindex
instance_of?
delete_prefix
between?
delete_suffix
bytesize
casecmp?
__callee__
__case_eqq
instance_exec
__to_int
String
unpack
__send__
upcase
instance_eval
to_str
p
codepoints
_inspect
capitalize
to_sym
Array
raise
instance_variable_defined?
Complex
print
remove_instance_variable
__printstr__
ord
<<
==
define_singleton_method
<=
block_given?
singleton_method_added
byteindex
__ENCODING__
instance_variable_set
byteslice
!~
!=
oct
next!
delete_suffix!
each_byte
downcase!
each_codepoint
yield_self
sub
srand
method_missing
split
instance_variable_get
strip
each_line
succ!
public_methods
each_char
__upto_endless
[]
instance_variables
end_with?
rjust
Rational
delete_prefix!
rpartition
Float
>=
slice
iterator?
<=>
hash
open
initialize_copy
gsub
local_variables
is_a?
printf
===
__lines
nil?
index
unpack1
partition
upcase!
gsub!
object_id
[]=
to_enum
method
singleton_class
lines
include?
private_methods
respond_to?
start_with?
ljust
kind_of?
setbyte
lstrip
fail
eval
loop
swapcase!
length
sprintf
eql?
squeeze
reverse
lambda
tr
itself
replace
gets
downcase
next
insert
global_variables
intern
rstrip!
Integer
enum_for
delete!
empty?
count
equal?
singleton_method
succ
dump
sub!
clear
extend
chomp
chop!
clone
hex
size
clamp
class
bytes
prepend
chop
send
format
chars
freeze
frozen?
caller
getbyte
singleton_methods
reverse!
chomp!
inspect
center
squeeze!
capitalize!
dup
proc
swapcase
lstrip!
chr
protected_methods
casecmp
delete
puts
rand
concat
methods
fz
to_i
slice!
!
tr!
tr_s!
tap
to_s
rstrip
%
+
then
*
strip!
to_f
initialize
__sub_replace
upto
<
>
tr_s
rindex
__method__
`
__id__
Hash
byterindex
instance_of?
delete_prefix
between?
delete_suffix
bytesize
casecmp?
__callee__
__case_eqq
instance_exec
__to_int
String
unpack
__send__
upcase
instance_eval
to_str
p
codepoints
_inspect
capitalize
to_sym
Array
raise
instance_variable_defined?
Complex
print
remove_instance_variable
__printstr__
ord
<<
==
define_singleton_method
<=
block_given?
singleton_method_added
byteindex
__ENCODING__
instance_variable_set
byteslice
!~
!=
oct
next!
delete_suffix!
each_byte
downcase!
each_codepoint
yield_self
sub
srand
method_missing
split
instance_variable_get
strip
each_line
succ!
public_methods
each_char
__upto_endless
[]
instance_variables
end_with?
rjust
Rational
delete_prefix!
rpartition
Float
>=
slice
iterator?
<=>
hash
open
initialize_copy
gsub
local_variables
is_a?
printf
===
__lines
nil?
index
unpack1
partition
upcase!
gsub!
object_id
[]=
to_enum
method
singleton_class
lines
include?
private_methods
respond_to?
start_with?
ljust
kind_of?
setbyte
lstrip
fail
eval
loop
swapcase!
length
sprintf
eql?
squeeze
reverse
lambda
tr
itself
replace
gets
downcase
next
insert
global_variables
intern
rstrip!
Integer
enum_for
delete!
empty?
count
equal?
singleton_method
succ
dump
sub!
clear
extend
chomp
chop!
clone
hex
size
clamp
class
bytes
prepend
chop
send
format
chars
freeze
frozen?
caller
getbyte
singleton_methods
reverse!
chomp!
inspect
center
squeeze!
capitalize!
dup
proc
swapcase
lstrip!
chr
protected_methods
casecmp
delete
puts
rand
concat
methods
=================================================================
==18==ERROR: AddressSanitizer: heap-use-after-free on address 0x52f000038500 at pc 0x561e9d04d59c bp 0x7ffcd8be0300 sp 0x7ffcd8be02f8
READ of size 4 at 0x52f000038500 thread T0
SCARINESS: 45 (4-byte-read-heap-use-after-free)
    #0 0x561e9d04d59b in mrb_gc_mark /src/mruby/src/gc.c:789:8
    #1 0x561e9d04d59b in gc_mark_children /src/mruby/src/gc.c:743:9
    #2 0x561e9d0489f6 in incremental_marking_phase /src/mruby/src/gc.c:1097:5
    #3 0x561e9d0489f6 in incremental_gc /src/mruby/src/gc.c:1237:14
    #4 0x561e9d042c51 in incremental_gc_finish /src/mruby/src/gc.c:1262:5
    #5 0x561e9d042c51 in mrb_full_gc /src/mruby/src/gc.c:1373:3
    #6 0x561e9d0469df in gc_start /src/mruby/src/gc.c:1453:3
    #7 0x561e9d07aecb in mrb_vm_exec /src/mruby/src/vm.c
    #8 0x561e9d068a8c in mrb_vm_run /src/mruby/src/vm.c:1275:12
    #9 0x561e9cfbdfc3 in mrb_load_exec /src/mruby/mrbgems/mruby-compiler/core/parse.y:6910:7
    #10 0x561e9cf75c70 in LLVMFuzzerTestOneInput /src/mruby/oss-fuzz/mruby_fuzzer.c:14:5
    #11 0x561e9ce2a760 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #12 0x561e9ce159d5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #13 0x561e9ce1b46f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #14 0x561e9ce46712 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #15 0x7fd98bb34082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #16 0x561e9ce0dbbd in _start (/out/mruby_fuzzer+0x165bbd)

DEDUP_TOKEN: mrb_gc_mark--gc_mark_children--incremental_marking_phase
0x52f000038500 is located 256 bytes inside of 49200-byte region [0x52f000038400,0x52f000044430)
freed by thread T0 here:
    #0 0x561e9cf36296 in free /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:52:3
    #1 0x561e9cf75ea5 in mrb_default_allocf /src/mruby/src/state.c:65:5
    #2 0x561e9d048736 in mrb_free /src/mruby/src/gc.c:296:3
    #3 0x561e9d048736 in incremental_sweep_phase /src/mruby/src/gc.c:1205:7
    #4 0x561e9d048736 in incremental_gc /src/mruby/src/gc.c:1246:20
    #5 0x561e9d042c51 in incremental_gc_finish /src/mruby/src/gc.c:1262:5
    #6 0x561e9d042c51 in mrb_full_gc /src/mruby/src/gc.c:1373:3
    #7 0x561e9d0469df in gc_start /src/mruby/src/gc.c:1453:3
    #8 0x561e9d07aecb in mrb_vm_exec /src/mruby/src/vm.c
    #9 0x561e9d068a8c in mrb_vm_run /src/mruby/src/vm.c:1275:12
    #10 0x561e9cfbdfc3 in mrb_load_exec /src/mruby/mrbgems/mruby-compiler/core/parse.y:6910:7
    #11 0x561e9cf75c70 in LLVMFuzzerTestOneInput /src/mruby/oss-fuzz/mruby_fuzzer.c:14:5
    #12 0x561e9ce2a760 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #13 0x561e9ce159d5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #14 0x561e9ce1b46f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #15 0x561e9ce46712 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #16 0x7fd98bb34082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: __interceptor_free--mrb_default_allocf--mrb_free
previously allocated by thread T0 here:
    #0 0x561e9cf3691c in realloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:82:3
    #1 0x561e9d044545 in mrb_realloc_simple /src/mruby/src/gc.c:234:8
    #2 0x561e9d044545 in mrb_realloc /src/mruby/src/gc.c:248:8
    #3 0x561e9d044545 in mrb_malloc /src/mruby/src/gc.c:264:10
    #4 0x561e9d044545 in mrb_calloc /src/mruby/src/gc.c:282:9
    #5 0x561e9d044545 in add_heap /src/mruby/src/gc.c:381:42
    #6 0x561e9d043d43 in mrb_obj_alloc /src/mruby/src/gc.c:584:5
    #7 0x561e9d00f166 in str_new /src/mruby/src/string.c:140:27
    #8 0x561e9d070e01 in mrb_vm_exec /src/mruby/src/vm.c:2801:19
    #9 0x561e9d068a8c in mrb_vm_run /src/mruby/src/vm.c:1275:12
    #10 0x561e9cfbdfc3 in mrb_load_exec /src/mruby/mrbgems/mruby-compiler/core/parse.y:6910:7
    #11 0x561e9cf75c70 in LLVMFuzzerTestOneInput /src/mruby/oss-fuzz/mruby_fuzzer.c:14:5
    #12 0x561e9ce2a760 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #13 0x561e9ce159d5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #14 0x561e9ce1b46f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #15 0x561e9ce46712 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #16 0x7fd98bb34082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: __interceptor_realloc--mrb_realloc_simple--mrb_realloc
SUMMARY: AddressSanitizer: heap-use-after-free /src/mruby/src/gc.c:789:8 in mrb_gc_mark
Shadow bytes around the buggy address:
  0x52f000038280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x52f000038300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x52f000038380: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x52f000038400: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x52f000038480: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
=>0x52f000038500:[fd]fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x52f000038580: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x52f000038600: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x52f000038680: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x52f000038700: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x52f000038780: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==18==ABORTING

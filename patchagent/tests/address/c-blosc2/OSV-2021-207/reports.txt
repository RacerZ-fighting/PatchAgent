==14==WARNING: AddressSanitizer failed to allocate 0xfffff6010b0098 bytes
=================================================================
==14==ERROR: AddressSanitizer: heap-use-after-free on address 0x5080000000a0 at pc 0x563100b8041c bp 0x7ffe614e93b0 sp 0x7ffe614e8b58
READ of size 32 at 0x5080000000a0 thread T0
SCARINESS: 54 (multi-byte-read-heap-use-after-free)
    #0 0x563100b8041b in MemcmpInterceptorCommon(void*, int (*)(void const*, void const*, unsigned long), void const*, void const*, unsigned long) /src/llvm-project/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:813:7
    #1 0x563100b808ec in memcmp /src/llvm-project/compiler-rt/lib/asan/../sanitizer_common/sanitizer_common_interceptors.inc:845:10
    #2 0x563100af140b in LooseMemeq /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:585:11
    #3 0x563100af140b in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:620:8
    #4 0x563100adc5b5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #5 0x563100ae204f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #6 0x563100b0d2f2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #7 0x7f72e5a14082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #8 0x563100ad479d in _start (/out/decompress_frame_fuzzer+0x12879d)

DEDUP_TOKEN: MemcmpInterceptorCommon(void*, int (*)(void const*, void const*, unsigned long), void const*, void const*, unsigned long)--___interceptor_memcmp--LooseMemeq
0x5080000000a0 is located 0 bytes inside of 89-byte region [0x5080000000a0,0x5080000000f9)
freed by thread T0 here:
    #0 0x563100bfce76 in free /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:52:3
    #1 0x563100ca473a in blosc2_frame_free /src/c-blosc2/blosc/frame.c:96:5
    #2 0x563100ca095b in blosc2_schunk_free /src/c-blosc2/blosc/schunk.c:244:5
    #3 0x563100c3c98c in LLVMFuzzerTestOneInput /src/c-blosc2/tests/fuzz/fuzz_decompress_frame.c:44:3
    #4 0x563100af1340 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #5 0x563100adc5b5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #6 0x563100ae204f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #7 0x563100b0d2f2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #8 0x7f72e5a14082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: __interceptor_free--blosc2_frame_free--blosc2_schunk_free
previously allocated by thread T0 here:
    #0 0x563100bfd10f in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:68:3
    #1 0x5631010419c3 in operator new(unsigned long) cxa_noexception.cpp
    #2 0x563100adc5b5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #3 0x563100ae204f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #4 0x563100b0d2f2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #5 0x7f72e5a14082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: __interceptor_malloc--operator new(unsigned long)--fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long)
SUMMARY: AddressSanitizer: heap-use-after-free (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e) in __libc_start_main
Shadow bytes around the buggy address:
  0x507ffffffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x507ffffffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x507fffffff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x507fffffff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x508000000000: fa fa fa fa 00 00 00 00 00 00 00 00 00 00 00 01
=>0x508000000080: fa fa fa fa[fd]fd fd fd fd fd fd fd fd fd fd fd
  0x508000000100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x508000000180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x508000000200: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x508000000280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x508000000300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==14==ABORTING

=================================================================
==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x50f0000001d5 at pc 0x55a4ebd62042 bp 0x7ffcb2a86bb0 sp 0x7ffcb2a86370
READ of size 222 at 0x50f0000001d5 thread T0
SCARINESS: 26 (multi-byte-read-heap-buffer-overflow)
    #0 0x55a4ebd62041 in __asan_memcpy /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:63:3
    #1 0x55a4ec07401b in ZSTD_initDDict_internal /src/c-blosc2/internal-complibs/zstd-1.4.8/decompress/zstd_ddict.c:134:9
    #2 0x55a4ec07401b in ZSTD_createDDict_advanced /src/c-blosc2/internal-complibs/zstd-1.4.8/decompress/zstd_ddict.c:155:39
    #3 0x55a4ec07401b in ZSTD_createDDict /src/c-blosc2/internal-complibs/zstd-1.4.8/decompress/zstd_ddict.c:173:12
    #4 0x55a4ebdea2df in initialize_context_decompression /src/c-blosc2/blosc/blosc2.c:1815:27
    #5 0x55a4ebdea2df in blosc_run_decompression_with_context /src/c-blosc2/blosc/blosc2.c:2350:8
    #6 0x55a4ebdea63d in blosc2_decompress_ctx /src/c-blosc2/blosc/blosc2.c:2376:12
    #7 0x55a4ebe228e1 in frame_decompress_chunk /src/c-blosc2/blosc/frame.c:2750:23
    #8 0x55a4ebda3945 in LLVMFuzzerTestOneInput /src/c-blosc2/tests/fuzz/fuzz_decompress_frame.c:38:15
    #9 0x55a4ebc58380 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #10 0x55a4ebc435f5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #11 0x55a4ebc4908f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #12 0x55a4ebc74332 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #13 0x7f880e715082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #14 0x55a4ebc3b7dd in _start (/out/decompress_frame_fuzzer+0x10d7dd)

DEDUP_TOKEN: __asan_memcpy--ZSTD_initDDict_internal--ZSTD_createDDict_advanced
0x50f0000001d5 is located 0 bytes after 165-byte region [0x50f000000130,0x50f0000001d5)
allocated by thread T0 here:
    #0 0x55a4ebd6414f in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:68:3
    #1 0x55a4ec12eed3 in operator new(unsigned long) cxa_noexception.cpp
    #2 0x55a4ebc435f5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #3 0x55a4ebc4908f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #4 0x55a4ebc74332 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #5 0x7f880e715082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: __interceptor_malloc--operator new(unsigned long)--fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/c-blosc2/internal-complibs/zstd-1.4.8/decompress/zstd_ddict.c:134:9 in ZSTD_initDDict_internal
Shadow bytes around the buggy address:
  0x50efffffff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x50efffffff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x50f000000000: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
  0x50f000000080: 00 00 00 00 00 00 00 00 00 00 00 00 05 fa fa fa
  0x50f000000100: fa fa fa fa fa fa 00 00 00 00 00 00 00 00 00 00
=>0x50f000000180: 00 00 00 00 00 00 00 00 00 00[05]fa fa fa fa fa
  0x50f000000200: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x50f000000280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x50f000000300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x50f000000380: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x50f000000400: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==14==ABORTING

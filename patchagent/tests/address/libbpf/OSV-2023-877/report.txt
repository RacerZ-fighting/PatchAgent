=================================================================
==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x50200000009c at pc 0x55e29cc9d157 bp 0x7ffd7e82d2a0 sp 0x7ffd7e82d298
READ of size 4 at 0x50200000009c thread T0
SCARINESS: 17 (4-byte-read-heap-buffer-overflow)
    #0 0x55e29cc9d156 in btf_ensure_modifiable /src/libbpf/src/btf.c:1689:34
    #1 0x55e29cca39b7 in btf__add_var /src/libbpf/src/btf.c:2737:6
    #2 0x55e29cc30b96 in add_dummy_ksym_var /src/libbpf/src/libbpf.c:4200:21
    #3 0x55e29cc30b96 in bpf_object__collect_externs /src/libbpf/src/libbpf.c:4229:21
    #4 0x55e29cbf4e42 in bpf_object_open /src/libbpf/src/libbpf.c:8054:16
    #5 0x55e29cbf52aa in bpf_object__open_mem /src/libbpf/src/libbpf.c:8096:20
    #6 0x55e29cbee9df in LLVMFuzzerTestOneInput /src/libbpf/fuzz/bpf-object-fuzzer.c:16:8
    #7 0x55e29caa3430 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #8 0x55e29ca8e6a5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #9 0x55e29ca9413f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #10 0x55e29cabf3e2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #11 0x7f5020007082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #12 0x55e29ca8688d in _start (/out/bpf-object-fuzzer+0xa688d)

DEDUP_TOKEN: btf_ensure_modifiable--btf__add_var--add_dummy_ksym_var
0x50200000009c is located 11 bytes after 1-byte region [0x502000000090,0x502000000091)
allocated by thread T0 here:
    #0 0x55e29cbaf1ff in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:68:3
    #1 0x55e29cc9cd72 in btf_ensure_modifiable /src/libbpf/src/btf.c:1671:8
    #2 0x55e29cca39b7 in btf__add_var /src/libbpf/src/btf.c:2737:6
    #3 0x55e29cc30b96 in add_dummy_ksym_var /src/libbpf/src/libbpf.c:4200:21
    #4 0x55e29cc30b96 in bpf_object__collect_externs /src/libbpf/src/libbpf.c:4229:21
    #5 0x55e29cbf4e42 in bpf_object_open /src/libbpf/src/libbpf.c:8054:16
    #6 0x55e29cbf52aa in bpf_object__open_mem /src/libbpf/src/libbpf.c:8096:20
    #7 0x55e29cbee9df in LLVMFuzzerTestOneInput /src/libbpf/fuzz/bpf-object-fuzzer.c:16:8
    #8 0x55e29caa3430 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #9 0x55e29ca8e6a5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #10 0x55e29ca9413f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #11 0x55e29cabf3e2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #12 0x7f5020007082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: __interceptor_malloc--btf_ensure_modifiable--btf__add_var
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/libbpf/src/btf.c:1689:34 in btf_ensure_modifiable
Shadow bytes around the buggy address:
  0x501ffffffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x501ffffffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x501fffffff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x501fffffff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x502000000000: fa fa 00 00 fa fa 00 fa fa fa 00 fa fa fa 00 fa
=>0x502000000080: fa fa 01[fa]fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000000100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000000180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000000200: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000000280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000000300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==14==ABORTING

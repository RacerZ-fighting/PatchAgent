=================================================================
==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x502000000218 at pc 0x5595ba01f857 bp 0x7ffeb2f64380 sp 0x7ffeb2f64378
READ of size 4 at 0x502000000218 thread T0
SCARINESS: 27 (4-byte-read-heap-buffer-overflow-far-from-bounds)
    #0 0x5595ba01f856 in compute_seq_size /src/bluez/src/sdp-xml.c:62:21
    #1 0x5595ba01f856 in element_end /src/bluez/src/sdp-xml.c:548:42
    #2 0x5595ba05d3f6 in emit_end_element /src/glib/_build/../glib/gmarkup.c:1045:5
    #3 0x5595ba05c958 in g_markup_parse_context_parse /src/glib/_build/../glib/gmarkup.c:1603:19
    #4 0x5595ba01dc35 in sdp_xml_parse_record /src/bluez/src/sdp-xml.c:621:6
    #5 0x5595ba022cd1 in LLVMFuzzerTestOneInput /src/fuzz_xml.c:30:9
    #6 0x5595b9ed2710 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #7 0x5595b9ebd985 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #8 0x5595b9ec341f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #9 0x5595b9eee6c2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #10 0x7fee68220082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #11 0x5595b9eb5b6d in _start (/out/fuzz_xml+0x94b6d)

DEDUP_TOKEN: compute_seq_size--element_end--emit_end_element
0x502000000218 is located 39 bytes after 1-byte region [0x5020000001f0,0x5020000001f1)
allocated by thread T0 here:
    #0 0x5595b9fde6a9 in calloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:75:3
    #1 0x5595ba023d08 in sdp_data_alloc_with_length /src/bluez/lib/sdp.c:425:17
    #2 0x5595ba02105c in sdp_xml_parse_text /src/bluez/src/sdp-xml.c:387:8
    #3 0x5595ba01f32a in sdp_xml_parse_datatype /src/bluez/src/sdp-xml.c:432:10
    #4 0x5595ba01f32a in element_start /src/bluez/src/sdp-xml.c:498:32
    #5 0x5595ba05d8b8 in emit_start_element /src/glib/_build/../glib/gmarkup.c:1010:5
    #6 0x5595ba05cb67 in g_markup_parse_context_parse /src/glib/_build/../glib/gmarkup.c:1369:17
    #7 0x5595ba01dc35 in sdp_xml_parse_record /src/bluez/src/sdp-xml.c:621:6
    #8 0x5595ba022cd1 in LLVMFuzzerTestOneInput /src/fuzz_xml.c:30:9
    #9 0x5595b9ed2710 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #10 0x5595b9ebd985 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #11 0x5595b9ec341f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #12 0x5595b9eee6c2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #13 0x7fee68220082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: __interceptor_calloc--sdp_data_alloc_with_length--sdp_xml_parse_text
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/bluez/src/sdp-xml.c:62:21 in compute_seq_size
Shadow bytes around the buggy address:
  0x501fffffff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x502000000000: fa fa 00 00 fa fa 00 fa fa fa 00 fa fa fa 00 fa
  0x502000000080: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 00
  0x502000000100: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 00 00
  0x502000000180: fa fa 00 00 fa fa 00 00 fa fa fd fa fa fa 01 fa
=>0x502000000200: fa fa fa[fa]fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000000280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000000300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000000380: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000000400: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000000480: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==14==ABORTING

=================================================================
==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x502000001091 at pc 0x5584338df807 bp 0x7ffc805ea3e0 sp 0x7ffc805ea3d8
WRITE of size 1 at 0x502000001091 thread T0
SCARINESS: 31 (1-byte-write-heap-buffer-overflow)
    #0 0x5584338df806 in cli_strlcat /src/clamav/libclamav/strlcat.c:63:8
    #1 0x5584339e0578 in yara_yyparse /work/build/libclamav/yara_grammar.y
    #2 0x5584338d3fe5 in yr_lex_parse_rules_file /work/build/libclamav/yara_lexer.l:752:3
    #3 0x55843368e64c in cli_loadyara /src/clamav/libclamav/readdb.c:4447:10
    #4 0x55843368cf92 in cli_load /src/clamav/libclamav/readdb.c
    #5 0x55843369ecc3 in cl_load /src/clamav/libclamav/readdb.c:5309:19
    #6 0x558433670568 in LLVMFuzzerTestOneInput /src/clamav/fuzz/clamav_dbload_fuzzer.cpp:126:30
    #7 0x558433524f30 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #8 0x5584335101a5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #9 0x558433515c3f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #10 0x558433540ee2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #11 0x7f4fa4bbe082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #12 0x55843350838d in _start (/out/clamav_dbload_YARA_fuzzer+0x44638d)

DEDUP_TOKEN: cli_strlcat--yara_yyparse--yr_lex_parse_rules_file
0x502000001091 is located 0 bytes after 1-byte region [0x502000001090,0x502000001091)
allocated by thread T0 here:
    #0 0x558433618bda in strdup /src/llvm-project/compiler-rt/lib/asan/asan_interceptors.cpp:570:3
    #1 0x558433671f39 in cli_safer_strdup /src/clamav/libclamav/others_common.c:364:13
    #2 0x5584339de346 in yara_yyparse /work/build/libclamav/yara_grammar.y:766:28
    #3 0x5584338d3fe5 in yr_lex_parse_rules_file /work/build/libclamav/yara_lexer.l:752:3
    #4 0x55843368e64c in cli_loadyara /src/clamav/libclamav/readdb.c:4447:10
    #5 0x55843368cf92 in cli_load /src/clamav/libclamav/readdb.c
    #6 0x55843369ecc3 in cl_load /src/clamav/libclamav/readdb.c:5309:19
    #7 0x558433670568 in LLVMFuzzerTestOneInput /src/clamav/fuzz/clamav_dbload_fuzzer.cpp:126:30
    #8 0x558433524f30 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #9 0x5584335101a5 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #10 0x558433515c3f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #11 0x558433540ee2 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #12 0x7f4fa4bbe082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: __interceptor_strdup--cli_safer_strdup--yara_yyparse
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/clamav/libclamav/strlcat.c:63:8 in cli_strlcat
Shadow bytes around the buggy address:
  0x502000000e00: fa fa fd fd fa fa fd fa fa fa fd fa fa fa fd fa
  0x502000000e80: fa fa 00 00 fa fa 00 00 fa fa 00 00 fa fa 05 fa
  0x502000000f00: fa fa 00 fa fa fa fd fa fa fa fd fa fa fa fd fa
  0x502000000f80: fa fa fd fa fa fa fd fd fa fa fd fa fa fa fd fa
  0x502000001000: fa fa fd fa fa fa 05 fa fa fa fd fa fa fa 00 00
=>0x502000001080: fa fa[01]fa fa fa 02 fa fa fa fa fa fa fa fa fa
  0x502000001100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000001180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000001200: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000001280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x502000001300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==14==ABORTING

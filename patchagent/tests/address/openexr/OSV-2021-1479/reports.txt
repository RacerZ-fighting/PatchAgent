=================================================================
==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x5110000003c0 at pc 0x561adf032812 bp 0x7fff04424220 sp 0x7fff04424218
READ of size 1 at 0x5110000003c0 thread T0
SCARINESS: 12 (1-byte-read-heap-buffer-overflow)
    #0 0x561adf032811 in hufDecode /src/openexr/src/lib/OpenEXRCore/internal_huf.c:814:9
    #1 0x561adf03111f in internal_huf_decompress /src/openexr/src/lib/OpenEXRCore/internal_huf.c:1084:9
    #2 0x561adf02ae6b in internal_exr_undo_piz /src/openexr/src/lib/OpenEXRCore/internal_piz.c:631:10
    #3 0x561adf0027fa in default_decompress_chunk /src/openexr/src/lib/OpenEXRCore/decoding.c:317:14
    #4 0x561adf00312e in exr_decoding_run /src/openexr/src/lib/OpenEXRCore/decoding.c:655:14
    #5 0x561adedc03ef in readCoreScanlinePart /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1245:18
    #6 0x561adedc03ef in Imf_2_5::(anonymous namespace)::checkCoreFile(_priv_exr_context_t*, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1441:18
    #7 0x561adedbd0c8 in runCoreChecks /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1538:15
    #8 0x561adedbd0c8 in Imf_2_5::checkOpenEXRFile(char const*, unsigned long, bool, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1565:17
    #9 0x561adedbb29f in LLVMFuzzerTestOneInput /src/openexr/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcheck_fuzzer.cc:17:5
    #10 0x561adec6fde0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #11 0x561adec5b055 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #12 0x561adec60aef in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #13 0x561adec8bd92 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #14 0x7fcd7aad5082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #15 0x561adec5323d in _start (/out/openexr_exrcheck_fuzzer+0x16423d)

DEDUP_TOKEN: hufDecode--internal_huf_decompress--internal_exr_undo_piz
0x5110000003c0 is located 0 bytes after 256-byte region [0x5110000002c0,0x5110000003c0)
allocated by thread T0 here:
    #0 0x561aded7bbaf in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:68:3
    #1 0x561adf0431b7 in internal_decode_alloc_buffer /src/openexr/src/lib/OpenEXRCore/coding.c:268:22
    #2 0x561adf002121 in default_read_chunk /src/openexr/src/lib/OpenEXRCore/decoding.c:189:14
    #3 0x561adf002fdb in exr_decoding_run /src/openexr/src/lib/OpenEXRCore/decoding.c:640:10
    #4 0x561adedc03ef in readCoreScanlinePart /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1245:18
    #5 0x561adedc03ef in Imf_2_5::(anonymous namespace)::checkCoreFile(_priv_exr_context_t*, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1441:18
    #6 0x561adedbd0c8 in runCoreChecks /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1538:15
    #7 0x561adedbd0c8 in Imf_2_5::checkOpenEXRFile(char const*, unsigned long, bool, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1565:17
    #8 0x561adedbb29f in LLVMFuzzerTestOneInput /src/openexr/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcheck_fuzzer.cc:17:5
    #9 0x561adec6fde0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #10 0x561adec5b055 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #11 0x561adec60aef in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #12 0x561adec8bd92 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #13 0x7fcd7aad5082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: __interceptor_malloc--internal_decode_alloc_buffer--default_read_chunk
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/openexr/src/lib/OpenEXRCore/internal_huf.c:814:9 in hufDecode
Shadow bytes around the buggy address:
  0x511000000100: 00 00 00 00 00 00 fa fa fa fa fa fa fa fa fa fa
  0x511000000180: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x511000000200: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x511000000280: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
  0x511000000300: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x511000000380: 00 00 00 00 00 00 00 00[fa]fa fa fa fa fa fa fa
  0x511000000400: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x511000000480: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x511000000500: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x511000000580: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x511000000600: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==14==ABORTING

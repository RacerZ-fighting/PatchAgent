=================================================================
==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x7f064e25ef8b at pc 0x56286df194b5 bp 0x7ffe864bce70 sp 0x7ffe864bce68
READ of size 4 at 0x7f064e25ef8b thread T0
SCARINESS: 17 (4-byte-read-heap-buffer-overflow)
    #0 0x56286df194b4 in generic_unpack /src/openexr/src/lib/OpenEXRCore/unpack.c:1168:13
    #1 0x56286df0c339 in exr_decoding_run /src/openexr/src/lib/OpenEXRCore/decoding.c:682:14
    #2 0x56286dcc93ef in readCoreScanlinePart /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1245:18
    #3 0x56286dcc93ef in Imf_2_5::(anonymous namespace)::checkCoreFile(_priv_exr_context_t*, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1441:18
    #4 0x56286dcc60c8 in runCoreChecks /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1538:15
    #5 0x56286dcc60c8 in Imf_2_5::checkOpenEXRFile(char const*, unsigned long, bool, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1565:17
    #6 0x56286dcc429f in LLVMFuzzerTestOneInput /src/openexr/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcheck_fuzzer.cc:17:5
    #7 0x56286db78de0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #8 0x56286db64055 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #9 0x56286db69aef in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #10 0x56286db94d92 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #11 0x7f064e66f082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #12 0x56286db5c23d in _start (/out/openexr_exrcheck_fuzzer+0x16423d)

DEDUP_TOKEN: generic_unpack--exr_decoding_run--readCoreScanlinePart
0x7f064e25ef8b is located 0 bytes after 214923-byte region [0x7f064e22a800,0x7f064e25ef8b)
allocated by thread T0 here:
    #0 0x56286dc84baf in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:68:3
    #1 0x56286df4c1b7 in internal_decode_alloc_buffer /src/openexr/src/lib/OpenEXRCore/coding.c:268:22
    #2 0x56286df0c0ad in exr_decoding_run /src/openexr/src/lib/OpenEXRCore/decoding.c:647:37
    #3 0x56286dcc93ef in readCoreScanlinePart /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1245:18
    #4 0x56286dcc93ef in Imf_2_5::(anonymous namespace)::checkCoreFile(_priv_exr_context_t*, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1441:18
    #5 0x56286dcc60c8 in runCoreChecks /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1538:15
    #6 0x56286dcc60c8 in Imf_2_5::checkOpenEXRFile(char const*, unsigned long, bool, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1565:17
    #7 0x56286dcc429f in LLVMFuzzerTestOneInput /src/openexr/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcheck_fuzzer.cc:17:5
    #8 0x56286db78de0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #9 0x56286db64055 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #10 0x56286db69aef in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #11 0x56286db94d92 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #12 0x7f064e66f082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: __interceptor_malloc--internal_decode_alloc_buffer--exr_decoding_run
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/openexr/src/lib/OpenEXRCore/unpack.c:1168:13 in generic_unpack
Shadow bytes around the buggy address:
  0x7f064e25ed00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f064e25ed80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f064e25ee00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f064e25ee80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x7f064e25ef00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x7f064e25ef80: 00[03]fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f064e25f000: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f064e25f080: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f064e25f100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f064e25f180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x7f064e25f200: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==14==ABORTING

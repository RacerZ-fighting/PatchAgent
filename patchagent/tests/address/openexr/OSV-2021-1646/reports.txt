=================================================================
==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x51f000001c00 at pc 0x558b040a9aa2 bp 0x7ffd5bdebb50 sp 0x7ffd5bdeb310
READ of size 40 at 0x51f000001c00 thread T0
SCARINESS: 26 (multi-byte-read-heap-buffer-overflow)
    #0 0x558b040a9aa1 in __asan_memcpy /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:63:3
    #1 0x558b04358084 in uncompress_b44_impl /src/openexr/src/lib/OpenEXRCore/internal_b44.c:599:13
    #2 0x558b043327fa in default_decompress_chunk /src/openexr/src/lib/OpenEXRCore/decoding.c:317:14
    #3 0x558b0433312e in exr_decoding_run /src/openexr/src/lib/OpenEXRCore/decoding.c:655:14
    #4 0x558b040f03ef in readCoreScanlinePart /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1245:18
    #5 0x558b040f03ef in Imf_2_5::(anonymous namespace)::checkCoreFile(_priv_exr_context_t*, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1441:18
    #6 0x558b040ed0c8 in runCoreChecks /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1538:15
    #7 0x558b040ed0c8 in Imf_2_5::checkOpenEXRFile(char const*, unsigned long, bool, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1565:17
    #8 0x558b040eb29f in LLVMFuzzerTestOneInput /src/openexr/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcheck_fuzzer.cc:17:5
    #9 0x558b03f9fde0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #10 0x558b03f8b055 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #11 0x558b03f90aef in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #12 0x558b03fbbd92 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #13 0x7f4caabf1082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #14 0x558b03f8323d in _start (/out/openexr_exrcheck_fuzzer+0x16423d)

DEDUP_TOKEN: __asan_memcpy--uncompress_b44_impl--default_decompress_chunk
0x51f000001c00 is located 0 bytes after 3456-byte region [0x51f000000e80,0x51f000001c00)
allocated by thread T0 here:
    #0 0x558b040abbaf in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:68:3
    #1 0x558b043731b7 in internal_decode_alloc_buffer /src/openexr/src/lib/OpenEXRCore/coding.c:268:22
    #2 0x558b04356932 in internal_exr_undo_b44 /src/openexr/src/lib/OpenEXRCore/internal_b44.c:620:10
    #3 0x558b043327fa in default_decompress_chunk /src/openexr/src/lib/OpenEXRCore/decoding.c:317:14
    #4 0x558b0433312e in exr_decoding_run /src/openexr/src/lib/OpenEXRCore/decoding.c:655:14
    #5 0x558b040f03ef in readCoreScanlinePart /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1245:18
    #6 0x558b040f03ef in Imf_2_5::(anonymous namespace)::checkCoreFile(_priv_exr_context_t*, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1441:18
    #7 0x558b040ed0c8 in runCoreChecks /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1538:15
    #8 0x558b040ed0c8 in Imf_2_5::checkOpenEXRFile(char const*, unsigned long, bool, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1565:17
    #9 0x558b040eb29f in LLVMFuzzerTestOneInput /src/openexr/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcheck_fuzzer.cc:17:5
    #10 0x558b03f9fde0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #11 0x558b03f8b055 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #12 0x558b03f90aef in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #13 0x558b03fbbd92 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #14 0x7f4caabf1082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: __interceptor_malloc--internal_decode_alloc_buffer--internal_exr_undo_b44
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/openexr/src/lib/OpenEXRCore/internal_b44.c:599:13 in uncompress_b44_impl
Shadow bytes around the buggy address:
  0x51f000001980: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x51f000001a00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x51f000001a80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x51f000001b00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x51f000001b80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x51f000001c00:[fa]fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x51f000001c80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x51f000001d00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x51f000001d80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x51f000001e00: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x51f000001e80: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==14==ABORTING

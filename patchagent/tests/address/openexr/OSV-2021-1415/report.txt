=================================================================
==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x51200000063f at pc 0x5610636afaa2 bp 0x7ffde59ba800 sp 0x7ffde59b9fc0
READ of size 8 at 0x51200000063f thread T0
SCARINESS: 23 (8-byte-read-heap-buffer-overflow)
    #0 0x5610636afaa1 in __asan_memcpy /src/llvm-project/compiler-rt/lib/asan/asan_interceptors_memintrinsics.cpp:63:3
    #1 0x5610636f7bbc in Imf_2_5::(anonymous namespace)::memstream_read(_priv_exr_context_t const*, void*, void*, unsigned long, unsigned long, int (*)(_priv_exr_context_t const*, int, char const*, ...)) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1500:13
    #2 0x5610638ed9db in dispatch_read /src/openexr/src/lib/OpenEXRCore/context.c:48:16
    #3 0x56106392edc2 in exr_read_scanline_chunk_info /src/openexr/src/lib/OpenEXRCore/chunk.c:275:10
    #4 0x5610636f5f83 in readCoreScanlinePart /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1186:14
    #5 0x5610636f5f83 in Imf_2_5::(anonymous namespace)::checkCoreFile(_priv_exr_context_t*, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1441:18
    #6 0x5610636f30ce in runCoreChecks /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1538:15
    #7 0x5610636f30ce in Imf_2_5::checkOpenEXRFile(char const*, unsigned long, bool, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1565:17
    #8 0x5610636f129f in LLVMFuzzerTestOneInput /src/openexr/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcheck_fuzzer.cc:17:5
    #9 0x5610635a5de0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #10 0x561063591055 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #11 0x561063596aef in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #12 0x5610635c1d92 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #13 0x7f48b34a3082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #14 0x56106358923d in _start (/out/openexr_exrcheck_fuzzer+0x16523d)

DEDUP_TOKEN: __asan_memcpy--Imf_2_5::(anonymous namespace)::memstream_read(_priv_exr_context_t const*, void*, void*, unsigned long, unsigned long, int (*)(_priv_exr_context_t const*, int, char const*, ...))--dispatch_read
0x51200000063f is located 1 bytes before 266-byte region [0x512000000640,0x51200000074a)
allocated by thread T0 here:
    #0 0x5610636b1baf in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:68:3
    #1 0x561063a77603 in operator new(unsigned long) cxa_noexception.cpp
    #2 0x561063591055 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #3 0x561063596aef in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #4 0x5610635c1d92 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #5 0x7f48b34a3082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: __interceptor_malloc--operator new(unsigned long)--fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long)
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1500:13 in Imf_2_5::(anonymous namespace)::memstream_read(_priv_exr_context_t const*, void*, void*, unsigned long, unsigned long, int (*)(_priv_exr_context_t const*, int, char const*, ...))
Shadow bytes around the buggy address:
  0x512000000380: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x512000000400: 00 00 00 00 00 00 00 00 00 00 00 00 fa fa fa fa
  0x512000000480: fa fa fa fa fa fa fa fa 00 00 00 00 00 00 00 00
  0x512000000500: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x512000000580: 00 00 00 00 00 00 00 00 00 02 fa fa fa fa fa fa
=>0x512000000600: fa fa fa fa fa fa fa[fa]00 00 00 00 00 00 00 00
  0x512000000680: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x512000000700: 00 00 00 00 00 00 00 00 00 02 fa fa fa fa fa fa
  0x512000000780: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x512000000800: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x512000000880: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==14==ABORTING

=================================================================
==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x50400000017c at pc 0x5603d59ec4b6 bp 0x7ffe2b630c30 sp 0x7ffe2b630c28
READ of size 2 at 0x50400000017c thread T0
SCARINESS: 14 (2-byte-read-heap-buffer-overflow)
    #0 0x5603d59ec4b5 in generic_unpack /src/openexr/src/lib/OpenEXRCore/unpack.c:1168:13
    #1 0x5603d59df0c9 in exr_decoding_run /src/openexr/src/lib/OpenEXRCore/decoding.c:682:14
    #2 0x5603d57975c2 in readCoreScanlinePart /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1244:18
    #3 0x5603d57975c2 in Imf_2_5::(anonymous namespace)::checkCoreFile(_priv_exr_context_t*, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1440:18
    #4 0x5603d57940fe in runCoreChecks /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1558:15
    #5 0x5603d57940fe in Imf_2_5::checkOpenEXRFile(char const*, unsigned long, bool, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1585:17
    #6 0x5603d579229f in LLVMFuzzerTestOneInput /src/openexr/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcheck_fuzzer.cc:17:5
    #7 0x5603d5646de0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #8 0x5603d5632055 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #9 0x5603d5637aef in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #10 0x5603d5662d92 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #11 0x7f96cb618082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)
    #12 0x5603d562a23d in _start (/out/openexr_exrcheck_fuzzer+0x16623d)

DEDUP_TOKEN: generic_unpack--exr_decoding_run--readCoreScanlinePart
0x50400000017c is located 0 bytes after 44-byte region [0x504000000150,0x50400000017c)
allocated by thread T0 here:
    #0 0x5603d5752baf in malloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:68:3
    #1 0x5603d5a1f596 in internal_decode_alloc_buffer /src/openexr/src/lib/OpenEXRCore/coding.c:277:22
    #2 0x5603d59dee3d in exr_decoding_run /src/openexr/src/lib/OpenEXRCore/decoding.c:647:37
    #3 0x5603d57975c2 in readCoreScanlinePart /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1244:18
    #4 0x5603d57975c2 in Imf_2_5::(anonymous namespace)::checkCoreFile(_priv_exr_context_t*, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1440:18
    #5 0x5603d57940fe in runCoreChecks /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1558:15
    #6 0x5603d57940fe in Imf_2_5::checkOpenEXRFile(char const*, unsigned long, bool, bool, bool) /src/openexr/src/lib/OpenEXRUtil/ImfCheckFile.cpp:1585:17
    #7 0x5603d579229f in LLVMFuzzerTestOneInput /src/openexr/src/test/OpenEXRFuzzTest/oss-fuzz/openexr_exrcheck_fuzzer.cc:17:5
    #8 0x5603d5646de0 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
    #9 0x5603d5632055 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
    #10 0x5603d5637aef in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
    #11 0x5603d5662d92 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
    #12 0x7f96cb618082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 0702430aef5fa3dda43986563e9ffcc47efbd75e)

DEDUP_TOKEN: __interceptor_malloc--internal_decode_alloc_buffer--exr_decoding_run
SUMMARY: AddressSanitizer: heap-buffer-overflow /src/openexr/src/lib/OpenEXRCore/unpack.c:1168:13 in generic_unpack
Shadow bytes around the buggy address:
  0x503ffffffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x503fffffff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x503fffffff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x504000000000: fa fa 00 00 00 00 00 00 fa fa 00 00 00 00 00 00
  0x504000000080: fa fa 00 00 00 00 00 00 fa fa 00 00 00 00 00 00
=>0x504000000100: fa fa 00 00 00 00 00 fa fa fa 00 00 00 00 00[04]
  0x504000000180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x504000000200: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x504000000280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x504000000300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x504000000380: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
==14==ABORTING

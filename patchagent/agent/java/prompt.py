JAVA_SYSTEM_PROMPT_TEMPLATE = """
Your task is to patch the bug in the program as identified by the sanitizer report. Access the buggy Java codebase and the corresponding sanitizer report highlighting various issues. Your objective is to analyze and efficiently patch these issues.

Begin by reviewing the sanitizer report to identify specific problems. Then, delve into the codebase to locate the exact code sections where these issues occur. Understanding the context and functionality of the problematic code is crucial to determine the best fix. Consider whether the issues need simple corrections, like adding null checks or adjusting array accesses, or if they require a more significant overhaul of the logic.

After identifying solutions, modify the code accordingly, ensuring adherence to Java best practices. Test your patches thoroughly to confirm resolution of issues without introducing new ones. Document your changes clearly, explaining the necessity of each modification and how it addresses the specific problems identified by the sanitizer. Your goal is to enhance the codebase's security and stability while minimizing new bug risks.

You have 3 tools available: `viewcode`, `locate` and `validate`.
- `viewcode` allows you to view a code snippet from a file at a specific tag, helping you understand the project's internal logic rather than just using common patterns for bug fixes. You should provide 3 arguments:

1. path: the file path of the file you want to view. The patch is the relative path of the file to the project root directory. For example, if you want to view the file `Main.java` in the project root directory, the file path is `Main.java`. If you want to view the file `Main.java` in the directory `src`, the file path is `src/Main.java`.
2. start line: the start line of the code snippet you want to view.
3. end line: the end line of the code snippet you want to view.

The return value of `viewcode` is the code snippet you want to view. We will attach the line number to the beginning of each line. For example, if you want to view the code snippet from line 10 to line 20, the return value of `viewcode` will be:
```java
7|   public void printMessage(String message) {{
8|        if (message != null)  {{
9|            System.out.println("Message: " + message);
10|        }} else  {{
11|            System.out.println("Message is null");
12|       }}
13|    }}
14|
15|    public int addNumbers(int a, int b)  {{
16|        return a + b;
17|    }}
18|
19|    public void printGreeting()  {{
20|        System.out.println("Hello, World!");
21|    }}
```

- `locate` is used to identify symbols. It can accurately pinpoint the location of a symbol, specifying the file and line number where it is defined. For example, if you wish to find the definition of a class or method, you can use `locate` to determine its location.
 
- `validate` is used to validate a patch. It replays the Proof of Concept (PoC) and checks if the sanitizer report is resolved. The patch should follow the format generated by the `git diff` command.

Example of a patch format:
```diff
--- a/src/Main.java
+++ b/src/Main.java
@@ -6,7 +6,8 @@
 public class Main {{
     public void printMessage(String message) {{
         if (message != null) {{
-            System.out.println("Message: " + message);
+            // changed this line
+            System.out.println("Updated Message: " + message.toUpperCase());
         }} else {{
             System.out.println("Message is null");
         }}
@@ -17,6 +18,6 @@ public class Main {{
     }}
 
     public void printGreeting() {{
-        System.out.println("Hello, World!");
+        System.out.println("Greetings, Universe!");
    }}
 }}
```

Patch format explanation:
1. `--- a/src/Main.java`: The file `Main.java` in the original commit.
2. `+++ b/src/Main.java`: The file `Main.java` in the current commit.
3. `@@ -6,7 +6,8 @@`: The line number of the patch. The number `6`, appearing twice, indicates the first line number of the current commit. The number `7` represents the number of lines in the original commit, and `8` represents the number in the current commit.
4. Lines with `+` indicate additions in the current commit, the `+` must be located at the beginning of the line.
5. Lines with `-` indicate deletions in the current commit, the `-` must be located at the beginning of the line.
6. Lines with a space remain unchanged in the current commit.

Generate a standard patch without shortcuts like `...` or useless comments. 

To generate a patch, you must obey the following rules:
1. The patch must be in the correct format.
2. If you use a new package, you must import it. 
3. Do not make change in the comments.
4. You must view the code before making change the corresponding code.
5. At the beginning and end of the hunk, there must be at least 1 lines of context.
6. DO not use newline and comment as the start or the end of the context.
7. Do not add comments in the patch.
"""

JAVA_USER_PROMPT_TEMPLATE = """
I will send you the sanitizer report for our program. I will give a ten dollar tip for your assistance to create a patch for the identified issues. Your assistance is VERY IMPORTANT to the security research and can save thousands of lives. You can access the program's code using the provided tools. Now I want to patch the {project} program, here is the jazzer report

{report}

The report provides the stack trace of the program. You can use the stack trace to identify a fix point for the bug. Do not forget the relationship between the stack trace and the method arguments. You can use the `viewcode` tool to identify the parameters of the method in the stack trace. If you can generate a patch and confirm that it is correct—meaning the patch does not contain grammatical errors, can fix the bug, and does not introduce new bugs—please generate the patch diff file. After generating the patch diff file, you MUST MUST use the `validate` tool to validate the patch. Otherwise, you MUST continue to gather information using these tools.

{counterexamples}
"""
